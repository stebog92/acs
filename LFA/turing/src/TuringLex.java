/* The following code was generated by JFlex 1.4.3 on 1/2/13 4:19 AM */


//import java_cup.runtime.*;
import java.io.IOException;
import java.util.StringTokenizer;
import java.util.HashMap;
import java.util.ArrayList;
// import .TuringSym;
// import static .TuringSym.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 1/2/13 4:19 AM from the specification file
 * <tt>/home/mihai/LFA/turing/src/Turing.lex</tt>
 */
final class TuringLex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int construction = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\27\1\14\25\0\1\11\1\21\1\0\2\1\1\37\1\30"+
    "\1\37\1\20\1\24\1\1\1\37\1\34\1\36\2\37\12\16\1\12"+
    "\1\13\1\22\1\31\1\23\1\0\1\32\13\16\1\17\5\16\1\17"+
    "\10\16\1\25\1\0\1\26\1\37\1\15\1\0\1\2\1\6\2\16"+
    "\1\7\2\16\1\5\3\16\1\3\1\16\1\16\1\16\1\4\3\16"+
    "\1\10\6\16\1\33\1\0\1\35\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\5\0\6\2\3\1\2\2\1\3\4\2"+
    "\1\4\2\2\32\0\2\1\11\0\1\3\1\5\2\3"+
    "\13\0\1\6\1\4\45\0\1\7\1\3\23\0\1\10"+
    "\31\0\1\11\50\0\1\12\10\0\1\13\7\0\1\10"+
    "\45\0\2\13\1\10\43\0\1\10\31\0\1\14";

  private static int [] zzUnpackAction() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\40\0\100\0\140\0\200\0\240\0\300\0\340"+
    "\0\u0100\0\u0120\0\u0140\0\u0160\0\u0180\0\u01a0\0\u01c0\0\u01e0"+
    "\0\u0200\0\u0220\0\u0240\0\u0260\0\u0280\0\u02a0\0\u02c0\0\u02e0"+
    "\0\u0300\0\u0320\0\340\0\u0340\0\u0360\0\u0380\0\u03a0\0\u03c0"+
    "\0\u03e0\0\u0400\0\u0420\0\u0440\0\u0460\0\u0480\0\u04a0\0\u04c0"+
    "\0\u04e0\0\340\0\u0120\0\u0500\0\u0140\0\u0160\0\u0180\0\u0520"+
    "\0\u0540\0\u0560\0\u0580\0\u05a0\0\u05c0\0\u05e0\0\u0200\0\u0300"+
    "\0\u0600\0\u0220\0\u0620\0\u0280\0\u02a0\0\u0640\0\u0320\0\u0660"+
    "\0\u0680\0\u06a0\0\u06c0\0\u06e0\0\u0260\0\u0700\0\u0720\0\u0740"+
    "\0\u0760\0\u0780\0\u07a0\0\u07c0\0\u07e0\0\u0800\0\u0820\0\u0840"+
    "\0\u0860\0\u0880\0\u08a0\0\u08c0\0\u08e0\0\u0900\0\u0920\0\u0940"+
    "\0\u0960\0\u0980\0\u09a0\0\u09c0\0\u09e0\0\u0a00\0\u0a20\0\u0a40"+
    "\0\u0a60\0\u0a80\0\u0aa0\0\u0ac0\0\u0ae0\0\u0b00\0\u0b20\0\u0b40"+
    "\0\u0b60\0\u0b80\0\u0ba0\0\u0bc0\0\u0be0\0\u0c00\0\u0c20\0\u0c40"+
    "\0\u0c60\0\u0c80\0\u0ca0\0\u0cc0\0\u0ce0\0\u0d00\0\u0d20\0\u0d40"+
    "\0\u0d60\0\u0d80\0\u0da0\0\u0dc0\0\u0de0\0\u0e00\0\u0e20\0\u0e40"+
    "\0\u0e60\0\u0e80\0\u0ea0\0\u0ec0\0\u0ee0\0\u0f00\0\u0f20\0\u0f40"+
    "\0\u0f60\0\u0f80\0\u0fa0\0\u0fc0\0\u0fe0\0\u1000\0\u1020\0\u1040"+
    "\0\u1060\0\u1080\0\u10a0\0\u10c0\0\u10e0\0\u1100\0\u1120\0\u1140"+
    "\0\u1160\0\u1180\0\u11a0\0\u11c0\0\u11e0\0\u1200\0\u1220\0\u1240"+
    "\0\u1260\0\u1280\0\u12a0\0\u12c0\0\340\0\u12e0\0\u1300\0\u1320"+
    "\0\u1340\0\u1360\0\u1380\0\u13a0\0\u13c0\0\u13e0\0\u1400\0\u1420"+
    "\0\u1440\0\u1460\0\u1480\0\u14a0\0\u14c0\0\u14e0\0\u1500\0\u1520"+
    "\0\u1540\0\u1560\0\u1580\0\u15a0\0\u15c0\0\u15e0\0\u1600\0\u1620"+
    "\0\u1640\0\u1660\0\u1680\0\u16a0\0\u16c0\0\u16e0\0\u1700\0\u1720"+
    "\0\u1740\0\u1760\0\u1780\0\u17a0\0\u17c0\0\u17e0\0\u1800\0\u1820"+
    "\0\u1840\0\u1860\0\u1880\0\u18a0\0\u18c0\0\u18e0\0\u1900\0\u1920"+
    "\0\u1940\0\u1960\0\u1980\0\u19a0\0\u19c0\0\u19e0\0\u1a00\0\u1a20"+
    "\0\u1a40\0\u1a60\0\u1a80\0\u1aa0\0\u1ac0\0\u1ae0\0\u1b00\0\u1b20"+
    "\0\u1b40\0\u1b60\0\u1b80\0\u1ba0\0\u1bc0\0\u1be0\0\u1c00\0\u1c20"+
    "\0\u1c40\0\u1c60\0\u1c80\0\u1ca0\0\u1cc0\0\u1ce0\0\u1d00\0\u1d20"+
    "\0\u1d40\0\u1d60\0\u1d80\0\u1da0\0\u1dc0\0\u1de0\0\u1e00\0\u1e20"+
    "\0\u1e40\0\u1e60\0\u1e80\0\u1ea0\0\u1ec0\0\u1ee0\0\u1f00\0\u1f20"+
    "\0\u1f40\0\u1f60\0\u1f80\0\u1fa0\0\u1fc0\0\u1fe0\0\u2000\0\u2020"+
    "\0\u2040\0\u2060\0\u2080\0\u20a0\0\u20c0\0\u20e0\0\u2100\0\u2120"+
    "\0\u2140\0\u2160\0\u2180\0\u21a0\0\u21c0\0\u21e0\0\u2200\0\u2220"+
    "\0\u2240\0\u2260\0\u2280\0\u22a0\0\u22c0\0\u22e0\0\u2300\0\u2320"+
    "\0\u2340\0\u2360\0\340\0\u2380\0\u23a0\0\u23c0\0\u23e0\0\u2400"+
    "\0\u2420\0\u2440\0\u2460\0\u2480\0\u24a0\0\u24c0\0\u24e0\0\u2500"+
    "\0\u2520\0\u2540\0\u2560\0\u2580\0\u25a0\0\u25c0\0\u25e0\0\u2600"+
    "\0\u2620\0\u2640\0\u2660\0\u2680\0\u26a0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\10\1\11\6\12\1\13\1\14\2\10\3\12\11\10"+
    "\1\15\10\10\1\11\6\12\1\16\1\14\1\17\1\20"+
    "\3\12\7\10\1\20\1\10\1\15\10\10\7\21\1\22"+
    "\1\10\1\23\1\10\3\21\1\24\1\25\1\26\2\10"+
    "\1\27\2\10\1\30\1\10\1\31\1\32\4\10\2\0"+
    "\7\4\4\0\3\4\12\0\1\33\16\0\1\34\2\0"+
    "\1\35\6\0\1\36\2\0\1\37\1\35\12\0\7\40"+
    "\1\41\3\0\3\40\1\42\1\43\1\44\7\0\1\45"+
    "\1\46\6\0\7\47\1\7\2\0\1\50\3\47\6\0"+
    "\1\51\1\50\1\52\51\0\1\53\1\54\5\53\1\55"+
    "\1\56\2\0\3\53\11\0\1\57\10\0\7\53\1\55"+
    "\1\56\2\0\3\53\11\0\1\57\17\0\1\60\1\56"+
    "\16\0\1\57\20\0\1\61\16\0\1\62\7\0\10\63"+
    "\1\64\4\0\2\63\12\0\1\63\16\0\1\65\1\56"+
    "\1\0\1\20\12\0\1\20\1\0\1\57\7\0\11\17"+
    "\2\0\1\66\1\0\3\17\2\0\2\17\3\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\2\17\11\0\1\20"+
    "\2\0\1\20\12\0\1\20\12\0\7\67\4\0\3\67"+
    "\12\0\1\70\7\0\7\71\1\72\1\0\1\73\1\0"+
    "\3\71\1\0\1\74\1\75\7\0\1\76\1\77\15\0"+
    "\1\100\1\0\1\101\1\102\7\0\1\103\2\0\1\100"+
    "\12\0\7\104\1\105\2\0\1\105\3\104\1\0\1\106"+
    "\1\107\4\0\1\105\2\0\1\110\1\111\26\0\1\75"+
    "\10\0\1\77\6\0\7\75\4\0\3\75\3\0\1\112"+
    "\15\0\1\113\7\114\1\113\3\0\2\114\1\115\2\0"+
    "\1\116\3\0\1\117\1\0\1\114\1\0\1\113\7\0"+
    "\7\30\1\120\3\0\3\30\22\0\7\121\1\122\3\0"+
    "\3\121\1\123\1\124\1\125\2\0\1\126\4\0\1\127"+
    "\1\130\5\0\10\131\1\132\4\0\2\131\2\0\1\133"+
    "\7\0\1\131\16\0\1\134\2\0\1\35\6\0\1\135"+
    "\2\0\1\37\1\35\21\0\1\35\2\0\1\35\11\0"+
    "\1\37\1\35\46\0\1\136\2\0\1\137\7\140\1\137"+
    "\3\0\3\140\3\0\1\141\1\142\1\52\2\0\1\137"+
    "\1\0\1\137\7\0\7\40\4\0\3\40\12\0\1\45"+
    "\7\0\7\40\1\41\3\0\3\40\1\0\1\43\1\44"+
    "\7\0\1\45\1\46\6\0\7\143\1\42\2\0\1\42"+
    "\3\143\1\0\1\144\1\145\4\0\1\42\2\0\1\146"+
    "\1\147\26\0\1\44\10\0\1\46\6\0\7\44\4\0"+
    "\3\44\3\0\1\150\35\0\1\43\1\44\10\0\1\46"+
    "\5\0\10\151\1\152\4\0\2\151\2\0\1\153\7\0"+
    "\1\151\7\0\7\47\4\0\3\47\10\0\1\52\20\0"+
    "\1\50\2\0\1\50\11\0\1\51\1\50\11\0\1\154"+
    "\7\155\1\154\3\0\3\155\3\0\1\156\1\157\1\160"+
    "\2\0\1\154\1\0\1\154\7\0\2\53\1\161\4\53"+
    "\1\55\1\56\2\0\3\53\11\0\1\57\17\0\1\60"+
    "\1\162\16\0\1\57\37\0\1\163\17\0\1\62\10\0"+
    "\1\164\10\0\1\165\15\0\1\63\1\0\1\166\25\0"+
    "\10\63\1\64\1\0\1\166\2\0\2\63\12\0\1\63"+
    "\16\0\1\65\1\162\1\0\1\20\12\0\1\20\1\0"+
    "\1\57\22\0\1\66\25\0\7\71\4\0\3\71\12\0"+
    "\1\76\20\0\1\101\45\0\1\74\1\75\10\0\1\77"+
    "\15\0\1\100\12\0\1\103\2\0\1\100\24\0\1\101"+
    "\34\0\1\100\2\0\1\102\7\0\1\103\2\0\1\100"+
    "\21\0\1\167\12\0\1\103\15\0\7\104\4\0\3\104"+
    "\12\0\1\110\27\0\1\107\10\0\1\111\6\0\7\107"+
    "\4\0\3\107\3\0\1\170\35\0\1\106\1\107\10\0"+
    "\1\111\5\0\10\171\1\172\4\0\2\171\2\0\1\173"+
    "\7\0\1\171\16\0\1\112\15\0\1\112\6\0\1\174"+
    "\27\0\1\117\13\0\7\114\4\0\3\114\6\0\1\117"+
    "\13\0\7\114\4\0\3\114\1\175\5\0\1\117\13\0"+
    "\7\116\4\0\3\116\3\0\1\113\25\0\1\117\2\0"+
    "\1\117\12\0\1\117\21\0\1\120\30\0\7\121\4\0"+
    "\3\121\12\0\1\127\7\0\7\121\1\122\3\0\3\121"+
    "\1\0\1\176\1\177\7\0\1\127\1\200\6\0\7\201"+
    "\1\123\2\0\1\123\3\201\1\0\1\202\1\203\4\0"+
    "\1\123\2\0\1\204\1\205\26\0\1\125\10\0\1\130"+
    "\6\0\7\125\4\0\3\125\3\0\1\206\15\0\1\207"+
    "\7\210\1\207\3\0\2\210\1\211\2\0\1\212\3\0"+
    "\1\213\1\0\1\210\1\0\1\207\26\0\1\176\1\177"+
    "\10\0\1\200\5\0\10\214\1\215\4\0\2\214\2\0"+
    "\1\216\7\0\1\214\41\0\1\217\1\112\3\0\10\131"+
    "\1\132\4\0\2\131\2\0\1\133\7\0\1\131\1\0"+
    "\1\217\1\112\3\0\11\133\4\0\2\133\3\0\1\220"+
    "\6\0\1\133\16\0\1\134\2\0\1\35\6\0\1\36"+
    "\2\0\1\37\1\35\46\0\1\221\12\0\1\136\11\0"+
    "\1\222\3\0\1\136\5\0\1\223\27\0\1\52\14\0"+
    "\7\140\4\0\3\140\5\0\1\52\2\0\1\137\11\0"+
    "\7\141\4\0\3\141\2\0\1\137\16\0\11\224\4\0"+
    "\2\224\1\225\1\226\1\227\1\224\6\0\1\224\7\0"+
    "\7\143\4\0\3\143\12\0\1\146\27\0\1\145\10\0"+
    "\1\147\6\0\7\145\4\0\3\145\3\0\1\230\35\0"+
    "\1\144\1\145\10\0\1\147\5\0\10\231\1\232\4\0"+
    "\2\231\2\0\1\233\7\0\1\231\16\0\1\150\15\0"+
    "\1\150\6\0\1\234\35\0\1\235\1\150\3\0\10\151"+
    "\1\152\4\0\2\151\2\0\1\153\7\0\1\151\1\0"+
    "\1\235\1\150\3\0\11\153\4\0\2\153\3\0\1\236"+
    "\6\0\1\153\32\0\1\160\14\0\7\155\4\0\3\155"+
    "\5\0\1\160\2\0\1\154\11\0\7\156\4\0\3\156"+
    "\2\0\1\154\16\0\11\237\4\0\2\237\1\240\1\241"+
    "\1\242\1\237\6\0\1\237\37\0\1\243\7\0\3\53"+
    "\1\244\3\53\1\55\1\56\2\0\3\53\11\0\1\57"+
    "\37\0\1\62\10\0\7\245\1\163\2\0\1\163\1\0"+
    "\3\245\4\0\1\245\1\0\1\163\12\0\7\164\4\0"+
    "\3\164\3\0\1\246\15\0\10\247\1\250\4\0\2\247"+
    "\2\0\1\251\7\0\1\247\21\0\1\166\34\0\1\167"+
    "\37\0\1\170\15\0\1\170\6\0\1\252\35\0\1\253"+
    "\1\170\3\0\10\171\1\172\4\0\2\171\2\0\1\173"+
    "\7\0\1\171\1\0\1\253\1\170\3\0\11\173\4\0"+
    "\2\173\3\0\1\254\6\0\1\173\30\0\1\255\15\0"+
    "\11\256\4\0\2\256\1\0\1\257\1\256\1\260\1\113"+
    "\5\0\1\256\27\0\1\177\10\0\1\200\6\0\7\177"+
    "\4\0\3\177\3\0\1\261\15\0\10\262\1\263\4\0"+
    "\2\262\2\0\1\264\7\0\1\262\7\0\7\201\4\0"+
    "\3\201\12\0\1\204\27\0\1\203\10\0\1\205\6\0"+
    "\7\203\4\0\3\203\3\0\1\265\35\0\1\202\1\203"+
    "\10\0\1\205\5\0\10\266\1\267\4\0\2\266\2\0"+
    "\1\270\7\0\1\266\16\0\1\206\15\0\1\206\6\0"+
    "\1\271\27\0\1\213\13\0\7\210\4\0\3\210\6\0"+
    "\1\213\13\0\7\210\4\0\3\210\1\272\5\0\1\213"+
    "\13\0\7\212\4\0\3\212\3\0\1\207\25\0\1\213"+
    "\2\0\1\213\12\0\1\213\44\0\1\273\1\206\3\0"+
    "\10\214\1\215\4\0\2\214\2\0\1\216\7\0\1\214"+
    "\1\0\1\273\1\206\3\0\11\216\4\0\2\216\3\0"+
    "\1\274\6\0\1\216\6\0\10\275\1\276\4\0\2\275"+
    "\12\0\1\275\41\0\1\277\1\112\13\0\1\221\11\0"+
    "\1\300\3\0\1\221\5\0\1\301\4\0\7\222\4\0"+
    "\3\222\2\0\1\302\16\0\10\303\1\304\4\0\2\303"+
    "\3\0\1\305\6\0\1\303\6\0\11\224\4\0\2\224"+
    "\1\225\1\226\1\227\7\0\1\224\24\0\1\137\40\0"+
    "\1\225\37\0\1\225\1\226\27\0\1\230\15\0\1\230"+
    "\6\0\1\306\35\0\1\307\1\230\3\0\10\231\1\232"+
    "\4\0\2\231\2\0\1\233\7\0\1\231\1\0\1\307"+
    "\1\230\3\0\11\233\4\0\2\233\3\0\1\310\6\0"+
    "\1\233\30\0\1\311\15\0\10\312\1\313\4\0\2\312"+
    "\12\0\1\312\41\0\1\314\1\150\3\0\11\237\4\0"+
    "\2\237\1\240\1\241\1\242\7\0\1\237\24\0\1\154"+
    "\40\0\1\240\37\0\1\240\1\241\20\0\7\243\4\0"+
    "\3\243\22\0\1\315\6\53\1\55\1\56\2\0\3\53"+
    "\11\0\1\57\17\0\1\246\1\0\1\316\60\0\1\317"+
    "\1\246\3\0\10\247\1\250\4\0\2\247\2\0\1\251"+
    "\7\0\1\247\1\0\1\317\1\246\3\0\11\251\4\0"+
    "\2\251\3\0\1\320\6\0\1\251\30\0\1\321\15\0"+
    "\10\322\1\323\4\0\2\322\12\0\1\322\41\0\1\324"+
    "\1\170\4\0\7\325\1\255\3\0\3\325\5\0\1\326"+
    "\2\0\1\327\1\0\1\330\6\0\11\256\4\0\2\256"+
    "\3\0\1\260\1\113\5\0\1\256\6\0\11\256\4\0"+
    "\2\256\2\0\1\256\1\260\1\113\5\0\1\256\31\0"+
    "\1\113\24\0\1\261\15\0\1\261\6\0\1\331\35\0"+
    "\1\332\1\261\3\0\10\262\1\263\4\0\2\262\2\0"+
    "\1\264\7\0\1\262\1\0\1\332\1\261\3\0\11\264"+
    "\4\0\2\264\3\0\1\333\6\0\1\264\16\0\1\265"+
    "\15\0\1\265\6\0\1\334\35\0\1\335\1\265\3\0"+
    "\10\266\1\267\4\0\2\266\2\0\1\270\7\0\1\266"+
    "\1\0\1\335\1\265\3\0\11\270\4\0\2\270\3\0"+
    "\1\336\6\0\1\270\30\0\1\337\15\0\11\340\4\0"+
    "\2\340\1\0\1\341\1\340\1\342\1\207\5\0\1\340"+
    "\6\0\10\343\1\344\4\0\2\343\12\0\1\343\41\0"+
    "\1\345\1\206\13\0\1\275\22\0\1\217\1\112\3\0"+
    "\11\275\4\0\2\275\12\0\1\275\1\0\1\217\1\112"+
    "\13\0\1\346\10\0\1\347\17\0\7\300\4\0\3\300"+
    "\2\0\1\350\16\0\10\351\1\352\4\0\2\351\3\0"+
    "\1\353\6\0\1\351\16\0\1\354\7\0\1\355\10\0"+
    "\1\356\16\0\1\357\21\0\1\302\1\360\4\0\10\361"+
    "\1\304\4\0\2\361\3\0\1\362\6\0\1\361\1\302"+
    "\1\360\4\0\11\305\4\0\2\305\2\0\1\363\7\0"+
    "\1\305\30\0\1\364\15\0\10\365\1\366\4\0\2\365"+
    "\12\0\1\365\41\0\1\367\1\230\13\0\1\311\37\0"+
    "\1\312\22\0\1\235\1\150\3\0\11\312\4\0\2\312"+
    "\12\0\1\312\1\0\1\235\1\150\13\0\1\370\10\0"+
    "\1\371\17\0\4\53\1\372\2\53\1\55\1\56\2\0"+
    "\3\53\11\0\1\57\22\0\1\316\24\0\10\373\1\374"+
    "\4\0\2\373\12\0\1\373\41\0\1\375\1\246\13\0"+
    "\1\376\37\0\1\322\22\0\1\253\1\170\3\0\11\322"+
    "\4\0\2\322\12\0\1\322\1\0\1\253\1\170\13\0"+
    "\1\377\10\0\1\u0100\17\0\7\325\4\0\3\325\12\0"+
    "\1\330\6\0\1\u0101\7\u0102\1\u0101\3\0\2\u0102\1\u0103"+
    "\2\0\1\u0104\3\0\1\u0105\1\0\1\u0102\1\0\1\u0101"+
    "\7\0\7\327\1\u0106\3\0\3\327\45\0\1\326\35\0"+
    "\1\u0107\15\0\10\u0108\1\u0109\4\0\2\u0108\12\0\1\u0108"+
    "\41\0\1\u010a\1\261\25\0\1\u010b\15\0\10\u010c\1\u010d"+
    "\4\0\2\u010c\12\0\1\u010c\41\0\1\u010e\1\265\4\0"+
    "\7\325\1\337\3\0\3\325\5\0\1\326\2\0\1\327"+
    "\1\0\1\330\6\0\11\340\4\0\2\340\3\0\1\342"+
    "\1\207\5\0\1\340\6\0\11\340\4\0\2\340\2\0"+
    "\1\340\1\342\1\207\5\0\1\340\31\0\1\207\24\0"+
    "\1\343\22\0\1\273\1\206\3\0\11\343\4\0\2\343"+
    "\12\0\1\343\1\0\1\273\1\206\13\0\1\u010f\10\0"+
    "\1\u0110\37\0\1\347\16\0\11\347\4\0\2\347\3\0"+
    "\1\u0111\6\0\1\347\16\0\1\u0112\2\0\1\u0113\3\0"+
    "\1\52\1\u0114\5\0\1\u0113\2\0\1\u0115\16\0\1\u0116"+
    "\21\0\1\350\1\u0117\4\0\10\u0118\1\352\4\0\2\u0118"+
    "\3\0\1\u0119\6\0\1\u0118\1\350\1\u0117\4\0\11\353"+
    "\4\0\2\353\2\0\1\u011a\7\0\1\353\16\0\1\354"+
    "\37\0\1\354\20\0\1\356\7\0\7\356\1\354\3\0"+
    "\3\356\31\0\1\u011b\21\0\1\302\1\360\4\0\10\303"+
    "\1\u011c\4\0\2\303\12\0\1\303\16\0\1\u011d\22\0"+
    "\1\360\4\0\11\362\4\0\2\362\2\0\1\u011e\7\0"+
    "\1\362\16\0\1\u011f\21\0\1\302\1\u0120\14\0\1\33"+
    "\37\0\1\365\22\0\1\307\1\230\3\0\11\365\4\0"+
    "\2\365\12\0\1\365\1\0\1\307\1\230\13\0\1\u0121"+
    "\10\0\1\u0122\37\0\1\371\16\0\11\371\4\0\2\371"+
    "\3\0\1\u0123\6\0\1\371\7\0\5\53\1\u0124\1\53"+
    "\1\55\1\56\2\0\3\53\11\0\1\57\17\0\1\373"+
    "\22\0\1\317\1\246\3\0\11\373\4\0\2\373\12\0"+
    "\1\373\1\0\1\317\1\246\13\0\1\u0125\10\0\1\u0126"+
    "\17\0\7\325\4\0\3\325\5\0\1\326\2\0\1\327"+
    "\1\0\1\330\27\0\1\u0100\16\0\11\u0100\4\0\2\u0100"+
    "\3\0\1\u0127\6\0\1\u0100\33\0\1\u0105\13\0\7\u0102"+
    "\4\0\3\u0102\6\0\1\u0105\13\0\7\u0102\4\0\3\u0102"+
    "\1\u0128\5\0\1\u0105\13\0\7\u0104\4\0\3\u0104\3\0"+
    "\1\u0101\25\0\1\u0105\2\0\1\u0105\12\0\1\u0105\21\0"+
    "\1\u0106\37\0\1\u0107\37\0\1\u0108\22\0\1\332\1\261"+
    "\3\0\11\u0108\4\0\2\u0108\12\0\1\u0108\1\0\1\332"+
    "\1\261\13\0\1\u0129\10\0\1\u012a\26\0\1\u012b\37\0"+
    "\1\u010c\22\0\1\335\1\265\3\0\11\u010c\4\0\2\u010c"+
    "\12\0\1\u010c\1\0\1\335\1\265\13\0\1\u012c\10\0"+
    "\1\u012d\37\0\1\u0110\16\0\11\u0110\4\0\2\u0110\3\0"+
    "\1\u012e\6\0\1\u0110\16\0\1\u0111\22\0\1\277\1\112"+
    "\13\0\1\u0112\2\0\1\u0113\3\0\1\52\6\0\1\u0113"+
    "\21\0\1\u0113\2\0\1\u0113\3\0\1\52\6\0\1\u0113"+
    "\21\0\1\u0112\2\0\1\u0113\3\0\1\52\6\0\1\u0113"+
    "\2\0\1\u0115\7\0\7\u0115\1\u0112\2\0\1\u0113\3\u0115"+
    "\1\52\6\0\1\u0113\21\0\1\u012f\21\0\1\350\1\u0117"+
    "\4\0\10\351\1\u0130\4\0\2\351\12\0\1\351\16\0"+
    "\1\u0131\22\0\1\u0117\4\0\11\u0119\4\0\2\u0119\2\0"+
    "\1\u0132\7\0\1\u0119\16\0\1\u0133\21\0\1\350\1\u0134"+
    "\14\0\1\u011b\21\0\1\302\5\0\10\361\1\u011c\4\0"+
    "\2\361\12\0\1\361\1\302\1\360\37\0\1\360\14\0"+
    "\1\u0135\22\0\1\u0120\14\0\1\u011b\21\0\1\302\1\u0120"+
    "\14\0\1\u0136\11\0\1\305\36\0\1\u0122\16\0\11\u0122"+
    "\4\0\2\u0122\3\0\1\u0137\6\0\1\u0122\16\0\1\u0123"+
    "\22\0\1\314\1\150\4\0\6\53\1\u0138\1\55\1\56"+
    "\2\0\3\53\11\0\1\57\30\0\1\u0126\16\0\11\u0126"+
    "\4\0\2\u0126\3\0\1\u0139\6\0\1\u0126\16\0\1\u0127"+
    "\22\0\1\324\1\170\3\0\11\u013a\4\0\2\u013a\1\0"+
    "\1\u013b\1\u013a\1\u013c\1\u0101\5\0\1\u013a\27\0\1\u012a"+
    "\16\0\11\u012a\4\0\2\u012a\3\0\1\u013d\6\0\1\u012a"+
    "\27\0\1\u012d\16\0\11\u012d\4\0\2\u012d\3\0\1\u013e"+
    "\6\0\1\u012d\16\0\1\u012e\22\0\1\345\1\206\13\0"+
    "\1\u012f\21\0\1\350\5\0\10\u0118\1\u0130\4\0\2\u0118"+
    "\12\0\1\u0118\1\350\1\u0117\37\0\1\u0117\14\0\1\u013f"+
    "\22\0\1\u0134\14\0\1\u012f\21\0\1\350\1\u0134\14\0"+
    "\1\u0140\11\0\1\353\50\0\1\u0120\14\0\1\u0136\11\0"+
    "\1\362\25\0\1\u0137\22\0\1\367\1\230\4\0\7\53"+
    "\1\u0141\1\u0142\2\0\3\53\11\0\1\57\17\0\1\u0139"+
    "\22\0\1\375\1\246\3\0\11\u013a\4\0\2\u013a\3\0"+
    "\1\u013c\1\u0101\5\0\1\u013a\6\0\11\u013a\4\0\2\u013a"+
    "\2\0\1\u013a\1\u013c\1\u0101\5\0\1\u013a\31\0\1\u0101"+
    "\24\0\1\u013d\22\0\1\u010a\1\261\13\0\1\u013e\22\0"+
    "\1\u010e\1\265\36\0\1\u0134\14\0\1\u0140\11\0\1\u0119"+
    "\25\0\1\60\1\u0142\16\0\1\57\20\0\1\u0143\16\0"+
    "\1\62\7\0\11\u0144\1\0\1\u0145\2\0\2\u0144\11\0"+
    "\1\163\1\u0144\6\0\11\u0144\1\0\1\u0145\2\0\2\u0144"+
    "\12\0\1\u0144\21\0\1\u0145\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9920];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\5\0\1\11\22\1\1\11\16\0\1\11"+
    "\12\0\2\1\11\0\4\1\13\0\2\1\37\0\1\1"+
    "\5\0\2\1\23\0\1\1\27\0\1\1\1\0\1\11"+
    "\34\0\1\1\6\0\1\1\4\0\1\1\10\0\1\1"+
    "\7\0\1\1\10\0\1\1\3\0\3\1\26\0\3\1"+
    "\12\0\1\1\1\0\2\1\25\0\1\11\31\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
/*	private Symbol sym(int type)
	{
		return sym(type, yytext());
	}

	private Symbol sym(int type, Object value)
	{
		return new Symbol(type, yyline, yycolumn, value);
	}

	private void error()
	throws IOException
	{
		throw new IOException("illegal text at line = "+yyline+", column = "+yycolumn+", text = '"+yytext()+"'");
	}*/
	public Alphabet alphabet = new Alphabet();
	public HashMap<String, ArrayList<String>> variableNames = new HashMap<String, ArrayList<String>>();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  TuringLex(java.io.Reader in) {
  	// TODO: code that goes to constructor
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  TuringLex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 112) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 10: 
          { String text = yytext();
							StringTokenizer stokenizer = new StringTokenizer(text, " :=");
							int begin = text.indexOf("{");
							int end = text.indexOf("}");
							Turing.variables.put(stokenizer.nextToken(), text.substring(begin, end + 1));
          }
        case 13: break;
        case 3: 
          { Turing.turingMachineInConstruction.popState();
										//System.out.println("close");
          }
        case 14: break;
        case 2: 
          { System.out.print(yytext());
          }
        case 15: break;
        case 12: 
          { String txt = yytext();
					for (int i = 8; i < txt.length(); i++) {
						if (txt.charAt(i) == ';') {
							break;
						}
						if (txt.charAt(i) != ' ' && txt.charAt(i) != ':') {
							alphabet.add(txt.charAt(i));
						} 
					}
					//System.out.println(alphabet.toString());
          }
        case 16: break;
        case 4: 
          { int Spacepos = yytext().indexOf(" ");
										if (Spacepos != -1) {
											Turing.turingMachineInConstruction.getLastState().loop_name = yytext().substring(1, Spacepos);
										} else {
											Turing.turingMachineInConstruction.getLastState().loop_name = yytext().substring(1);
										}
          }
        case 17: break;
        case 8: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 3;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL[zzFPos++];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 4;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL[--zzFPos];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { String text = yytext();
											Turing.turingMachineInConstruction.declareVar(yytext().substring(0, yytext().length() - 1));
          }
        case 18: break;
        case 11: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 5;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL[zzFPos++];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 6;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL[--zzFPos];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { //System.out.println(yytext()+ "\nhere");
											StringBuilder initialText = new StringBuilder(yytext());
											StringBuilder newSet;
											String text;
											if (initialText.toString().contains("<")) {
												int begin = yytext().indexOf("<");
												int end = yytext().indexOf(">");
												initialText.replace (begin, end + 1, Turing.variables.get(initialText.substring(begin + 1, end)));
											}
																					
											if (initialText.toString().contains("!{")) {
												int begin = initialText.toString().indexOf("{");
												int end = initialText.toString().indexOf("}");
												newSet = new StringBuilder("{");
												String set = initialText.toString().substring(begin, end + 1);
												for (Character x : alphabet.getElements()) {
													if (!set.contains("" + x)) {
														if (newSet.charAt(newSet.length() - 1) == '{') {
															newSet.append (" " + x);
														} else {
															newSet.append (", " + x);
														}
													}
												}
												newSet.append("}");
												int firstB = initialText.indexOf("{");
												int lastB = initialText.indexOf("}");
												initialText.replace (firstB - 1, lastB + 1, newSet.toString());
												text = initialText.toString();
											} else {
												text = initialText.toString();
											}
											State newState = new State(Turing.turingMachineInConstruction);
											if (text.contains("@{")) {
												int begin;
												int end = text.indexOf("@");
												for (begin = 0; text.charAt(begin) == ' ' | text.charAt(begin) == '\n' | 
																							text.charAt(begin) == '('; begin++);
												String varName = text.substring(begin, end);
												if (!variableNames.containsKey(varName)) {
													variableNames.put(varName, new ArrayList<String>());
													variableNames.get(varName).add(varName);
												} else {
													String newName = variableNames.get(varName).get(variableNames.get(varName).size() - 1) + "1";
													variableNames.get(varName).add(newName);
													varName = newName;
												}
												
												Turing.turingMachineInConstruction.getLastState().var = varName;
											}
											int begin = 0;
											if (text.contains("(")) {
												for (begin = 0; text.charAt(begin) != '{'; begin++);
											}
											
											String transitionKey = text.substring(begin, text.indexOf("}") + 1);
											Turing.turingMachineInConstruction.getLastState().addTransition(transitionKey, newState);
											for (int i = 0; i < transitionKey.length() && transitionKey.charAt(i) != '}'; i++) {
												if (transitionKey.charAt(i) != ' ' && transitionKey.charAt(i) != ',' && transitionKey.charAt(i) != '{') {
													Turing.turingMachineInConstruction.getLastState().mapCharToTransition (transitionKey.charAt(i), transitionKey);
												}
											}
											Turing.turingMachineInConstruction.pushState(newState);
          }
        case 19: break;
        case 9: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { //System.out.println(yytext());
					int i;
					for(i = 0; i < yytext().length() && yytext().charAt(i) != ' ' && yytext().charAt(i) != ':'; i++);
					Turing.turingMachineInConstruction = new TuringMachine(yytext().substring(0, i));
					//System.out.println("here");
					yybegin(construction);
          }
        case 20: break;
        case 7: 
          { String text = yytext();
							StringTokenizer stokenizer = new StringTokenizer(text, " =;");
							Turing.variables.put(stokenizer.nextToken(), stokenizer.nextToken());
          }
        case 21: break;
        case 6: 
          { //System.out.println(yytext());
							StringBuilder initialText = new StringBuilder(yytext());
							if (initialText.toString().contains("<")) {
									int begin = yytext().indexOf("<");
									int end = yytext().indexOf(">");
									initialText.replace (begin, end + 1, Turing.variables.get(initialText.substring(begin + 1, end)));
							}
							final String text = initialText.toString();
							
							if (text.contains("[R]")) {
								Turing.turingMachineInConstruction.getLastState().addTuringMachine(new TuringMachine("R") {
									@Override
									public void execute() {
										
										Turing.position++;
									}
								});
							} else
							if (text.contains("[L]")) {
								Turing.turingMachineInConstruction.getLastState().addTuringMachine(new TuringMachine("L") {
									@Override
									public void execute() {
										Turing.position--;
									}
								});
							} else
							if (text.contains("[R(!")) {
								Turing.turingMachineInConstruction.getLastState().addTuringMachine(new TuringMachine(text) {
									private Character otherThan = text.charAt(4);
									@Override
									public void execute() {
										
										Turing.position++;
										while (Turing.bus.charAt(Turing.position) == otherThan) {
											Turing.position++;
										}
									}
								});
							} else
							if (text.contains("[L(!")) {
								Turing.turingMachineInConstruction.getLastState().addTuringMachine(new TuringMachine(text) {
									private Character otherThan = text.charAt(4);
									@Override
									public void execute() {
										Turing.position--;
										while (Turing.bus.charAt(Turing.position) == otherThan) {
											Turing.position--;
										}
									}
								});
							} else
							if (text.contains("[R(")) {
								Turing.turingMachineInConstruction.getLastState().addTuringMachine(new TuringMachine(text) {
									private Character upTo = text.charAt(3);
									@Override
									public void execute() {
										Turing.position++;
										while (Turing.bus.charAt(Turing.position) != upTo) {
											Turing.position++;
										}
									}
								});
							} else
							if (text.contains("[L(")) {
								Turing.turingMachineInConstruction.getLastState().addTuringMachine(new TuringMachine(text) {
									private Character upTo = text.charAt(3);
									@Override
									public void execute() {
										
										Turing.position--;
										int initialpos = 0;
										try {
										initialpos = Turing.position;
										while (Turing.bus.charAt(Turing.position) != upTo) {
											Turing.position--;
										}
										} catch (StringIndexOutOfBoundsException e) {
											System.out.println("bus :" + Turing.bus + "\nchar:" + upTo + "\npos" + initialpos + "\nname" + name);
										}
									}
								});
							} else 
							if (text.charAt(0) == '[' && text.charAt(2) == ']') {
								Turing.turingMachineInConstruction.getLastState().addTuringMachine(new TuringMachine(text) {
									private Character toPrint = text.charAt(1);
									@Override
									public void execute() {
										Turing.bus.setCharAt(Turing.position, toPrint);
									}
								});
							} else
							if (text.charAt(0) == '[' && text.contains("[&")) {
								StringBuilder newNameCall = new StringBuilder(text);
								String newName = variableNames.get(text.substring(2,text.length() - 2)).get
														(variableNames.get(text.substring(2,text.length() - 2)).size() - 1);
								newNameCall.replace(2, text.length() - 2, newName);
								Turing.turingMachineInConstruction.getLastState().addTuringMachine(new TuringMachine(newNameCall.toString()) {
									private Character toPrint;
									@Override
									public void execute() {
										String sample = name.substring(2, name.length() - 2);
										toPrint = Turing.variables.get(name.substring(2, name.length() - 2)).charAt(0);
										Turing.bus.setCharAt(Turing.position, toPrint);
									}
								});
							} else
							{
								
								int begin = text.indexOf("[");
								int end = text.indexOf("]");
								
								String text2 = text.substring(begin + 1, end);
								Turing.turingMachineInConstruction.getLastState().addTuringMachine(
									Turing.turingMachines.get(text2));
							}
							//System.out.println(Turing.turingMachineInConstruction.getLastState().toString());
          }
        case 22: break;
        case 5: 
          { yybegin(YYINITIAL);
										Turing.turingMachines.put(Turing.turingMachineInConstruction.getName(), 
										Turing.turingMachineInConstruction);
          }
        case 23: break;
        case 1: 
          { 
          }
        case 24: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java TuringLex <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        TuringLex scanner = null;
        try {
          scanner = new TuringLex( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
