Parsarea si executia unei masini Turing

Ciocan Mihai
334CA

Compilare si rulare

Compilarea se realizeaza ruland make ce realizeaza un Turing.jar.Jar-ul se poate rula folosind ./mtx ceea ce inseamna ca testele pot fi rulate cu ./test.sh fara nicio modificare in fisierul test.sh fiind necesar ca fisierele Turing.jar si mtx sa se afle in acelasi director cu test.sh.

Prezentare Solutie pe scurt

Solutia a fost implementata in Java. Pentru construirea masinilor Turing se folosesc in principal clasele State ce reprezinta o stare si TuringMachine ce reprezinta masina turing cu starile si tranzitiile aferente.
Fiecare obiect State contine o lista cu masinile turing ce trebuie executate, si un map cu tranzitiile ce reprezinta asocieri intre elemente ale alfabetului si stari. Obiectele TuringMachine contin o stare initiala, astfel ca in momentul cand masina Turing e rulata fiecare stare ruleaza masinile Turing aferente, si pe baza caracterului citit se trece in starea urmatoare, pe baza tranzitiilor din starea curenta.

Pozitia capului de citire / scriere si banda sunt retinute static in clasa Turing.

Asignarea de nume temporare masinilor Turing presupune maparea numelor cu starea si pozitia de unde urmeaza sa se ruleze masinile turing ce apartin starii respective. Astfel ca in metoda nextState din clasa State se verifica daca exista "un ciclu" sau o referinta la o stare anterioara. In acest caz se intoarce se seteaza in starea ce urmeaza, pozitia de unde trebuie inceputa rularea masinilor Turing.

In cazul numelor pentru simboluri, se realizeaza inlocuirea lor la aparitia referintelor si prelucrarea normala. In cazul aparitiei tranzitiilor de tipul x@{...} variabilele sunt retinute static in Turing iar valorile sunt mapate cu numele variabilelor in momentul stabilirii urmatoarei stari (valoarea fiind caracterul citit de pe banda). In cazul aparitiei x@!{ } se inlocuieste !{ } cu complementarul sau (dat fiind ca stim alfabetul) urmand prelucrarea de mai sus. Masinile elementare au fost hardcodate.

Parsarea a fost realizata cu Jflex facand match pe cat mai multe pattern-uri posibile astfel incat sa pot prelucra cu usurinta obiectele pentru construirea masinilor Turing.
