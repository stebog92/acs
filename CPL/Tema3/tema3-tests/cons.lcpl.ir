;;;;;;; Standard data types from runtime
%struct.TObject = type { %struct.__lcpl_rtti* }
%struct.TString = type { %struct.__lcpl_rtti*, i32, i8* }
%struct.TIO = type { %struct.__lcpl_rtti* }
%struct.__lcpl_rtti = type { %struct.TString*, i32, %struct.__lcpl_rtti*, [0 x i8*] }


%struct.RObject = type %struct.__lcpl_rtti*
@RObject = external global %struct.RObject
%struct.RString = type %struct.__lcpl_rtti*
@RString = external global %struct.RString
%struct.RIO = type %struct.__lcpl_rtti*
@RIO = external global %struct.RIO
declare void @Object_init(%struct.TObject*)
declare void @M6_Object_abort(%struct.TObject*)
declare %struct.TString* @M6_Object_typeName(%struct.TObject*)
declare %struct.TObject* @M6_Object_copy(%struct.TObject*)
declare void @IO_init(%struct.TIO*)
declare %struct.TString* @M2_IO_in(%struct.TIO*)
declare %struct.TIO* @M2_IO_out(%struct.TIO*, %struct.TString*)
declare void @String_init(%struct.TString*)
declare i32 @M6_String_length(%struct.TString*)
declare i32 @M6_String_toInt(%struct.TString*)
declare %struct.TString* @M6_String_substring(%struct.TString*, i32, i32)
declare %struct.TString* @M6_String_concat(%struct.TString*, %struct.TString*)
declare i32 @M6_String_equal(%struct.TString*, %struct.TString*)


declare i8* @__lcpl_new(%struct.__lcpl_rtti*)
declare void @__lcpl_checkNull(i8*)
declare i8* @__lcpl_cast(i8*, %struct.__lcpl_rtti*)
declare %struct.TString* @__lcpl_intToString(i32)
;;;;;;; Custom code
;
; Structure of classes
;
%struct.TCons = type { %struct.__lcpl_rtti* , i32, %struct.TCons*}
%struct.TMain = type { %struct.__lcpl_rtti* }
; Name of classes
@class_name.Cons = internal constant [5 x i8] c"Cons\00"
@NCons = global %struct.TString { %struct.__lcpl_rtti* bitcast(%struct.RString* @RString to %struct.__lcpl_rtti*), i32 4, i8* getelementptr ([5 x i8]* @class_name.Cons, i32 0, i32 0) }
@class_name.Main = internal constant [5 x i8] c"Main\00"
@NMain = global %struct.TString { %struct.__lcpl_rtti* bitcast(%struct.RString* @RString to %struct.__lcpl_rtti*), i32 4, i8* getelementptr ([5 x i8]* @class_name.Main, i32 0, i32 0) }
; String constants used in the program
@string_constant.strEmpty = internal constant [1 x i8] c"\00"

@_string_constant.strEmpty = global %struct.TString { %struct.__lcpl_rtti* bitcast(%struct.RString* @RString to %struct.__lcpl_rtti*), i32 0, i8* getelementptr ([1 x i8]* @string_constant.strEmpty, i32 0, i32 0)}

; Runtime type information and virtual tables
;
%struct.RCons = type { %struct.TString*, i32, %struct.__lcpl_rtti*, [6 x i8*] }
@RCons = global %struct.RCons{ %struct.TString* @NCons, i32 10, %struct.__lcpl_rtti* bitcast(%struct.RObject* @RObject to %struct.__lcpl_rtti*),
[6 x i8*] [i8* bitcast (void (%struct.TCons*)* @Cons_init to i8*)
,	i8* bitcast (void(%struct.TObject*)* @M6_Object_abort to i8*)
,	i8* bitcast (%struct.TString*(%struct.TObject*)* @M6_Object_typeName to i8*)
,	i8* bitcast (%struct.TObject*(%struct.TObject*)* @M6_Object_copy to i8*)
,	i8* bitcast (i32(%struct.TCons*)* @M4_Cons_size to i8*)
,	i8* bitcast (void(%struct.TCons*, i32, %struct.TCons*)* @M4_Cons_init to i8*)
]}
%struct.RMain = type { %struct.TString*, i32, %struct.__lcpl_rtti*, [5 x i8*] }
@RMain = global %struct.RMain{ %struct.TString* @NMain, i32 4, %struct.__lcpl_rtti* bitcast(%struct.RObject* @RObject to %struct.__lcpl_rtti*),
[5 x i8*] [i8* bitcast (void (%struct.TMain*)* @Main_init to i8*)
,	i8* bitcast (void(%struct.TObject*)* @M6_Object_abort to i8*)
,	i8* bitcast (%struct.TString*(%struct.TObject*)* @M6_Object_typeName to i8*)
,	i8* bitcast (%struct.TObject*(%struct.TObject*)* @M6_Object_copy to i8*)
,	i8* bitcast (void(%struct.TMain*)* @M4_Main_main to i8*)
]}
; Class initializer (constructor) forCons
define void @Cons_init(%struct.TCons* %self) {
%1 = alloca %struct.TCons*
store %struct.TCons* %self, %struct.TCons** %1
%2 = load %struct.TCons** %1
%3 = bitcast %struct.TCons* %2 to %struct.TObject*
call void @Object_init(%struct.TObject* %3)

%4 = getelementptr %struct.TCons* %2, i32 0, i32 1
store i32 0, i32* %4
%5 = getelementptr %struct.TCons* %2, i32 0, i32 2
ret void
}
; Class initializer (constructor) forMain
define void @Main_init(%struct.TMain* %self) {
%1 = alloca %struct.TMain*
store %struct.TMain* %self, %struct.TMain** %1
%2 = load %struct.TMain** %1
%3 = bitcast %struct.TMain* %2 to %struct.TObject*
call void @Object_init(%struct.TObject* %3)

ret void
}

define i32 @M4_Cons_size (%struct.TCons* %self) {
	; Prologue - save parameters
	%1 = alloca %struct.TCons*
	store %struct.TCons* %self, %struct.TCons** %1

	%2 = load %struct.TCons** %1
	%3 = getelementptr %struct.TCons* %2, i32 0, i32 2
	%4 = load %struct.TCons** %3
	%5 = bitcast %struct.TCons* %4 to i8*
	%6 = call i8* @__lcpl_cast(i8* %5, %struct.__lcpl_rtti* bitcast (%struct.RObject* @RObject to %struct.__lcpl_rtti*))
	%7 = bitcast i8* %6 to %struct.TObject*
	%8 = bitcast %struct.TObject* %7 to i8*
	%9 = icmp eq i8* %8, null
	%10 = zext i1 %9 to i32
	%11 = icmp ne i32 %10, 0
	br i1 %11, label %L0, label %L1
L0:
L1:
	%12 = load %struct.TCons** %1
	%13 = getelementptr %struct.TCons* %12, i32 0, i32 2
	%14 = load %struct.TCons** %13
	%15 = bitcast %struct.TCons* %14 to i8*         ; Null ptr check
	call void @__lcpl_checkNull(i8* %15)
	%16 = getelementptr %struct.TCons* %14, i32 0, i32 0   ; Locate address of RTTI pointer
	%17 = load %struct.__lcpl_rtti** %16         ; Load RTTI pointer
	%18 = getelementptr %struct.__lcpl_rtti* %17, i32 0, i32 3, i32 4
	%19 = load i8** %18
	%20 = bitcast i8* %19 to i32 (%struct.TCons*)*  ; Convert char * into function pointer
	%21 = call i32 %20(%struct.TCons* %14)

	%22 = phi i32 [ 0, %L2 ], [ %21, %L2 ]
	%23 = add i32 1, %22
	ret i32 %23
}
define void @M4_Cons_init (%struct.TCons* %self, i32 %hd, %struct.TCons* %tl) {
	; Prologue - save parameters
	%1 = alloca %struct.TCons*
	store %struct.TCons* %self, %struct.TCons** %1

	%2 = alloca i32
	store i32 %hd, i32* %2
	%3 = alloca %struct.TCons*
	store %struct.TCons* %tl, %struct.TCons** %3
	%4 = load i32* %2
	%5 = load %struct.TCons** %1
	%6 = getelementptr %struct.TCons* %5, i32 0, i32 1
	store i32 %4, i32* %6
	%7 = load %struct.TCons** %3
	%8 = load %struct.TCons** %1
	%9 = getelementptr %struct.TCons* %8, i32 0, i32 2
	store %struct.Tnull* %7, %struct.Tnull** %9
	ret void
}
define void @M4_Main_main (%struct.TMain* %self) {
	; Prologue - save parameters
	%1 = alloca %struct.TMain*
	store %struct.TMain* %self, %struct.TMain** %1

	%2 = alloca %struct.TCons*
	store %struct.TCons* null, %struct.TCons** %2
	%3 = alloca i32
	store i32 0, i32* %3
	%4 = call i8* @__lcpl_new(%struct.__lcpl_rtti* bitcast (%struct.RCons* @RCons to %struct.__lcpl_rtti*))
	%5 = bitcast i8* %4 to %struct.TCons*
	store %struct.TCons* %5, %struct.TCons** %2
	store i32 0, i32* %3
	%7 = load %struct.TCons** %2
	%8 = bitcast %struct.TCons* %7 to i8*         ; Null ptr check
	call void @__lcpl_checkNull(i8* %8)
	%9 = getelementptr %struct.TCons* %7, i32 0, i32 0   ; Locate address of RTTI pointer
	%10 = load %struct.__lcpl_rtti** %9         ; Load RTTI pointer
	%11 = getelementptr %struct.__lcpl_rtti* %10, i32 0, i32 3, i32 5
	%12 = load i8** %11
	%13 = bitcast i8* %12 to void (%struct.TCons*, i32, %struct.TCons*)*  ; Convert char * into function pointer
	%14 = load i32* %3
	%15 = load %struct.TCons** %2
	call void %13(%struct.TCons* %7, i32 %14, %struct.TCons* %15)

	ret void
}
define void @startup() {
	%1 = call i8* @__lcpl_new(%struct.__lcpl_rtti* bitcast (%struct.RMain* @RMain to %struct.__lcpl_rtti*))
	%2 = bitcast i8* %1 to %struct.TMain*                       ; Convert char * into destination type
	; Dispatch to main method
	%3 = bitcast %struct.TMain* %2 to i8*
	call void @__lcpl_checkNull(i8* %3)
	%4 = getelementptr %struct.TMain* %2, i32 0, i32 0
	%5 = load %struct.__lcpl_rtti** %4
	%6 = getelementptr %struct.__lcpl_rtti* %5, i32 0, i32 3
	%7 = bitcast [0 x i8*]* %6 to i8**
	%8 = getelementptr i8** %7, i32 4
	%9 = load i8** %8
	%10 = bitcast i8* %9 to void (%struct.TMain*)*
	call void %10(%struct.TMain* %2)
	ret void
}
