;;;;;;; Standard data types from runtime
%struct.TObject = type { %struct.__lcpl_rtti* }
%struct.TString = type { %struct.__lcpl_rtti*, i32, i8* }
%struct.TIO = type { %struct.__lcpl_rtti* }
%struct.__lcpl_rtti = type { %struct.TString*, i32, %struct.__lcpl_rtti*, [0 x i8*] }


%struct.RObject = type %struct.__lcpl_rtti*
@RObject = external global %struct.RObject
%struct.RString = type %struct.__lcpl_rtti*
@RString = external global %struct.RString
%struct.RIO = type %struct.__lcpl_rtti*
@RIO = external global %struct.RIO
declare void @Object_init(%struct.TObject*)
declare void @M6_Object_abort(%struct.TObject*)
declare %struct.TString* @M6_Object_typeName(%struct.TObject*)
declare %struct.TObject* @M6_Object_copy(%struct.TObject*)
declare void @IO_init(%struct.TIO*)
declare %struct.TString* @M2_IO_in(%struct.TIO*)
declare %struct.TIO* @M2_IO_out(%struct.TIO*, %struct.TString*)
declare void @String_init(%struct.TString*)
declare i32 @M6_String_length(%struct.TString*)
declare i32 @M6_String_toInt(%struct.TString*)
declare %struct.TString* @M6_String_substring(%struct.TString*, i32, i32)
declare %struct.TString* @M6_String_concat(%struct.TString*, %struct.TString*)
declare i32 @M6_String_equal(%struct.TString*, %struct.TString*)


declare i8* @__lcpl_new(%struct.__lcpl_rtti*)
declare void @__lcpl_checkNull(i8*)
declare i8* @__lcpl_cast(i8*, %struct.__lcpl_rtti*)
declare %struct.TString* @__lcpl_intToString(i32)
;;;;;;; Custom code
;
; Structure of classes
;
%struct.TIntStr = type { %struct.__lcpl_rtti* , %struct.TString*}
%struct.TMain = type { %struct.__lcpl_rtti* }
; Name of classes
@class_name.IntStr = internal constant [7 x i8] c"IntStr\00"
@NIntStr = global %struct.TString { %struct.__lcpl_rtti* bitcast(%struct.RString* @RString to %struct.__lcpl_rtti*), i32 6, i8* getelementptr ([7 x i8]* @class_name.IntStr, i32 0, i32 0) }
@class_name.Main = internal constant [5 x i8] c"Main\00"
@NMain = global %struct.TString { %struct.__lcpl_rtti* bitcast(%struct.RString* @RString to %struct.__lcpl_rtti*), i32 4, i8* getelementptr ([5 x i8]* @class_name.Main, i32 0, i32 0) }
; String constants used in the program
@string_constant.strEmpty = internal constant [1 x i8] c"\00"

@_string_constant.strEmpty = global %struct.TString { %struct.__lcpl_rtti* bitcast(%struct.RString* @RString to %struct.__lcpl_rtti*), i32 0, i8* getelementptr ([1 x i8]* @string_constant.strEmpty, i32 0, i32 0)}

@string_constant.0 = constant [2 x i8] c"3\00"
@_string_constant.0 = global %struct.TString { %struct.__lcpl_rtti* bitcast(%struct.RString* @RString to %struct.__lcpl_rtti*), i32 1, i8* getelementptr ([2 x i8]* @string_constant.0, i32 0, i32 0) }
; Runtime type information and virtual tables
;
%struct.RIntStr = type { %struct.TString*, i32, %struct.__lcpl_rtti*, [6 x i8*] }
@RIntStr = global %struct.RIntStr{ %struct.TString* @NIntStr, i32 7, %struct.__lcpl_rtti* bitcast(%struct.RObject* @RObject to %struct.__lcpl_rtti*),
[6 x i8*] [i8* bitcast (void (%struct.TIntStr*)* @IntStr_init to i8*)
,	i8* bitcast (void(%struct.TObject*)* @M6_Object_abort to i8*)
,	i8* bitcast (%struct.TString*(%struct.TObject*)* @M6_Object_typeName to i8*)
,	i8* bitcast (%struct.TObject*(%struct.TObject*)* @M6_Object_copy to i8*)
,	i8* bitcast (void(%struct.TIntStr*, %struct.TString*)* @M6_IntStr_set to i8*)
,	i8* bitcast (i32(%struct.TIntStr*)* @M6_IntStr_get to i8*)
]}
%struct.RMain = type { %struct.TString*, i32, %struct.__lcpl_rtti*, [9 x i8*] }
@RMain = global %struct.RMain{ %struct.TString* @NMain, i32 4, %struct.__lcpl_rtti* bitcast(%struct.RIO* @RIO to %struct.__lcpl_rtti*),
[9 x i8*] [i8* bitcast (void (%struct.TMain*)* @Main_init to i8*)
,	i8* bitcast (void(%struct.TObject*)* @M6_Object_abort to i8*)
,	i8* bitcast (%struct.TString*(%struct.TObject*)* @M6_Object_typeName to i8*)
,	i8* bitcast (%struct.TObject*(%struct.TObject*)* @M6_Object_copy to i8*)
,	i8* bitcast (%struct.TString*(%struct.TIO*)* @M2_IO_in to i8*)
,	i8* bitcast (%struct.TIO*(%struct.TIO*, %struct.TString*)* @M2_IO_out to i8*)
,	i8* bitcast (i32(%struct.TMain*, i32, i32, %struct.TString*)* @M4_Main_mac to i8*)
,	i8* bitcast (i32(%struct.TMain*, i32, i32, %struct.TIntStr*)* @M4_Main_mac2 to i8*)
,	i8* bitcast (void(%struct.TMain*)* @M4_Main_main to i8*)
]}
; Class initializer (constructor) forIntStr
define void @IntStr_init(%struct.TIntStr* %self) {
%1 = alloca %struct.TIntStr*
store %struct.TIntStr* %self, %struct.TIntStr** %1
%2 = load %struct.TIntStr** %1
%3 = bitcast %struct.TIntStr* %2 to %struct.TObject*
call void @Object_init(%struct.TObject* %3)

%4 = getelementptr %struct.TIntStr* %2, i32 0, i32 1
store %struct.TString* @_string_constant.strEmpty, %struct.TString** %4
ret void
}
; Class initializer (constructor) forMain
define void @Main_init(%struct.TMain* %self) {
%1 = alloca %struct.TMain*
store %struct.TMain* %self, %struct.TMain** %1
%2 = load %struct.TMain** %1
%3 = bitcast %struct.TMain* %2 to %struct.TIO*
call void @IO_init(%struct.TIO* %3)

ret void
}

define void @M6_IntStr_set (%struct.TIntStr* %self, %struct.TString* %s) {
	; Prologue - save parameters
	%1 = alloca %struct.TIntStr*
	store %struct.TIntStr* %self, %struct.TIntStr** %1

	%2 = alloca %struct.TString*
	store %struct.TString* %s, %struct.TString** %2
	%3 = load %struct.TString** %2
	%4 = load %struct.TIntStr** %1
	%5 = getelementptr %struct.TIntStr* %4, i32 0, i32 1
	store %struct.TString* %3, %struct.TString** %5
	ret void
}
define i32 @M6_IntStr_get (%struct.TIntStr* %self) {
	; Prologue - save parameters
	%1 = alloca %struct.TIntStr*
	store %struct.TIntStr* %self, %struct.TIntStr** %1

	%2 = load %struct.TIntStr** %1
	%3 = getelementptr %struct.TIntStr* %2, i32 0, i32 1
	%4 = load %struct.TString** %3
	%5 = bitcast %struct.TString* %4 to i8*         ; Null ptr check
	call void @__lcpl_checkNull(i8* %5)
	%6 = getelementptr %struct.TString* %4, i32 0, i32 0   ; Locate address of RTTI pointer
	%7 = load %struct.__lcpl_rtti** %6         ; Load RTTI pointer
	%8 = getelementptr %struct.__lcpl_rtti* %7, i32 0, i32 3, i32 5
	%9 = load i8** %8
	%10 = bitcast i8* %9 to i32 (%struct.TString*)*  ; Convert char * into function pointer
	%11 = call i32 %10(%struct.TString* %4)

	ret i32 %11
}
define i32 @M4_Main_mac (%struct.TMain* %self, i32 %a, i32 %b, %struct.TString* %c) {
	; Prologue - save parameters
	%1 = alloca %struct.TMain*
	store %struct.TMain* %self, %struct.TMain** %1

	%2 = alloca i32
	store i32 %a, i32* %2
	%3 = alloca i32
	store i32 %b, i32* %3
	%4 = alloca %struct.TString*
	store %struct.TString* %c, %struct.TString** %4
	%5 = load i32* %2
	%6 = load i32* %3
	%7 = mul i32 %5, %6
	%8 = load %struct.TString** %4
	%9 = bitcast %struct.TString* %8 to i8*         ; Null ptr check
	call void @__lcpl_checkNull(i8* %9)
	%10 = getelementptr %struct.TString* %8, i32 0, i32 0   ; Locate address of RTTI pointer
	%11 = load %struct.__lcpl_rtti** %10         ; Load RTTI pointer
	%12 = getelementptr %struct.__lcpl_rtti* %11, i32 0, i32 3, i32 5
	%13 = load i8** %12
	%14 = bitcast i8* %13 to i32 (%struct.TString*)*  ; Convert char * into function pointer
	%15 = call i32 %14(%struct.TString* %8)

	%16 = add i32 %7, %15
	ret i32 %16
}
define i32 @M4_Main_mac2 (%struct.TMain* %self, i32 %a, i32 %b, %struct.TIntStr* %c) {
	; Prologue - save parameters
	%1 = alloca %struct.TMain*
	store %struct.TMain* %self, %struct.TMain** %1

	%2 = alloca i32
	store i32 %a, i32* %2
	%3 = alloca i32
	store i32 %b, i32* %3
	%4 = alloca %struct.TIntStr*
	store %struct.TIntStr* %c, %struct.TIntStr** %4
	%5 = load i32* %2
	%6 = load i32* %3
	%7 = mul i32 %5, %6
	%8 = load %struct.TIntStr** %4
	%9 = bitcast %struct.TIntStr* %8 to i8*         ; Null ptr check
	call void @__lcpl_checkNull(i8* %9)
	%10 = getelementptr %struct.TIntStr* %8, i32 0, i32 0   ; Locate address of RTTI pointer
	%11 = load %struct.__lcpl_rtti** %10         ; Load RTTI pointer
	%12 = getelementptr %struct.__lcpl_rtti* %11, i32 0, i32 3, i32 5
	%13 = load i8** %12
	%14 = bitcast i8* %13 to i32 (%struct.TIntStr*)*  ; Convert char * into function pointer
	%15 = call i32 %14(%struct.TIntStr* %8)

	%16 = add i32 %7, %15
	ret i32 %16
}
define void @M4_Main_main (%struct.TMain* %self) {
	; Prologue - save parameters
	%1 = alloca %struct.TMain*
	store %struct.TMain* %self, %struct.TMain** %1

	%2 = alloca %struct.TIntStr*
	%3 = call i8* @__lcpl_new(%struct.__lcpl_rtti* bitcast (%struct.RIntStr* @RIntStr to %struct.__lcpl_rtti*))
	%4 = bitcast i8* %3 to %struct.TIntStr*
	store %struct.TIntStr* %4, %struct.TIntStr** %2
	%5 = load %struct.TMain** %1
	%6 = bitcast %struct.TMain* %5 to i8*         ; Null ptr check
	call void @__lcpl_checkNull(i8* %6)
	%7 = getelementptr %struct.TMain* %5, i32 0, i32 0   ; Locate address of RTTI pointer
	%8 = load %struct.__lcpl_rtti** %7         ; Load RTTI pointer
	%9 = getelementptr %struct.__lcpl_rtti* %8, i32 0, i32 3, i32 5
	%10 = load i8** %9
	%11 = bitcast i8* %10 to %struct.TIO* (%struct.TIO*, %struct.TString*)*  ; Convert char * into function pointer
	%12 = bitcast %struct.TMain* %5 to %struct.TIO*
	%13 = load %struct.TMain** %1
	%14 = bitcast %struct.TMain* %13 to i8*         ; Null ptr check
	call void @__lcpl_checkNull(i8* %14)
	%15 = getelementptr %struct.TMain* %13, i32 0, i32 0   ; Locate address of RTTI pointer
	%16 = load %struct.__lcpl_rtti** %15         ; Load RTTI pointer
	%17 = getelementptr %struct.__lcpl_rtti* %16, i32 0, i32 3, i32 6
	%18 = load i8** %17
	%19 = bitcast i8* %18 to i32 (%struct.TMain*, i32, i32, %struct.TString*)*  ; Convert char * into function pointer
	%20 = call %struct.TString* @__lcpl_intToString(i32 3)
	%21 = call i32 %19(%struct.TMain* %13, i32 1, i32 2, %struct.TString* %20)

	%22 = call %struct.TString* @__lcpl_intToString(i32 %21)
	%23 = call %struct.TIO* %11(%struct.TIO* %12, %struct.TString* %22)

	%24 = load %struct.TIntStr** %2
	%25 = bitcast %struct.TIntStr* %24 to i8*         ; Null ptr check
	call void @__lcpl_checkNull(i8* %25)
	%26 = getelementptr %struct.TIntStr* %24, i32 0, i32 0   ; Locate address of RTTI pointer
	%27 = load %struct.__lcpl_rtti** %26         ; Load RTTI pointer
	%28 = getelementptr %struct.__lcpl_rtti* %27, i32 0, i32 3, i32 4
	%29 = load i8** %28
	%30 = bitcast i8* %29 to void (%struct.TIntStr*, %struct.TString*)*  ; Convert char * into function pointer
	call void %30(%struct.TIntStr* %24, %struct.TString* @_string_constant.0)

	%31 = load %struct.TMain** %1
	%32 = bitcast %struct.TMain* %31 to i8*         ; Null ptr check
	call void @__lcpl_checkNull(i8* %32)
	%33 = getelementptr %struct.TMain* %31, i32 0, i32 0   ; Locate address of RTTI pointer
	%34 = load %struct.__lcpl_rtti** %33         ; Load RTTI pointer
	%35 = getelementptr %struct.__lcpl_rtti* %34, i32 0, i32 3, i32 5
	%36 = load i8** %35
	%37 = bitcast i8* %36 to %struct.TIO* (%struct.TIO*, %struct.TString*)*  ; Convert char * into function pointer
	%38 = bitcast %struct.TMain* %31 to %struct.TIO*
	%39 = load %struct.TMain** %1
	%40 = bitcast %struct.TMain* %39 to i8*         ; Null ptr check
	call void @__lcpl_checkNull(i8* %40)
	%41 = getelementptr %struct.TMain* %39, i32 0, i32 0   ; Locate address of RTTI pointer
	%42 = load %struct.__lcpl_rtti** %41         ; Load RTTI pointer
	%43 = getelementptr %struct.__lcpl_rtti* %42, i32 0, i32 3, i32 7
	%44 = load i8** %43
	%45 = bitcast i8* %44 to i32 (%struct.TMain*, i32, i32, %struct.TIntStr*)*  ; Convert char * into function pointer
	%46 = load %struct.TIntStr** %2
	%47 = call i32 %45(%struct.TMain* %39, i32 1, i32 2, %struct.TIntStr* %46)

	%48 = call %struct.TString* @__lcpl_intToString(i32 %47)
	%49 = call %struct.TIO* %37(%struct.TIO* %38, %struct.TString* %48)

	ret void
}
define void @startup() {
	%1 = call i8* @__lcpl_new(%struct.__lcpl_rtti* bitcast (%struct.RMain* @RMain to %struct.__lcpl_rtti*))
	%2 = bitcast i8* %1 to %struct.TMain*                       ; Convert char * into destination type
	; Dispatch to main method
	%3 = bitcast %struct.TMain* %2 to i8*
	call void @__lcpl_checkNull(i8* %3)
	%4 = getelementptr %struct.TMain* %2, i32 0, i32 0
	%5 = load %struct.__lcpl_rtti** %4
	%6 = getelementptr %struct.__lcpl_rtti* %5, i32 0, i32 3
	%7 = bitcast [0 x i8*]* %6 to i8**
	%8 = getelementptr i8** %7, i32 8
	%9 = load i8** %8
	%10 = bitcast i8* %9 to void (%struct.TMain*)*
	call void %10(%struct.TMain* %2)
	ret void
}
