;;;;;;; Standard data types from runtime
%struct.TObject = type { %struct.__lcpl_rtti* }
%struct.TString = type { %struct.__lcpl_rtti*, i32, i8* }
%struct.TIO = type { %struct.__lcpl_rtti* }
%struct.__lcpl_rtti = type { %struct.TString*, i32, %struct.__lcpl_rtti*, [0 x i8*] }


%struct.RObject = type %struct.__lcpl_rtti*
@RObject = external global %struct.RObject
%struct.RString = type %struct.__lcpl_rtti*
@RString = external global %struct.RString
%struct.RIO = type %struct.__lcpl_rtti*
@RIO = external global %struct.RIO
declare void @Object_init(%struct.TObject*)
declare void @M6_Object_abort(%struct.TObject*)
declare %struct.TString* @M6_Object_typeName(%struct.TObject*)
declare %struct.TObject* @M6_Object_copy(%struct.TObject*)
declare void @IO_init(%struct.TIO*)
declare %struct.TString* @M2_IO_in(%struct.TIO*)
declare %struct.TIO* @M2_IO_out(%struct.TIO*, %struct.TString*)
declare void @String_init(%struct.TString*)
declare i32 @M6_String_length(%struct.TString*)
declare i32 @M6_String_toInt(%struct.TString*)
declare %struct.TString* @M6_String_substring(%struct.TString*, i32, i32)
declare %struct.TString* @M6_String_concat(%struct.TString*, %struct.TString*)
declare i32 @M6_String_equal(%struct.TString*, %struct.TString*)


declare i8* @__lcpl_new(%struct.__lcpl_rtti*)
declare void @__lcpl_checkNull(i8*)
declare i8* @__lcpl_cast(i8*, %struct.__lcpl_rtti*)
declare %struct.TString* @__lcpl_intToString(i32)
;;;;;;; Custom code
;
; Structure of classes
;
%struct.TMain = type { %struct.__lcpl_rtti* }
; Name of classes
@class_name.Main = internal constant [5 x i8] c"Main\00"
@NMain = global %struct.TString { %struct.__lcpl_rtti* bitcast(%struct.RString* @RString to %struct.__lcpl_rtti*), i32 4, i8* getelementptr ([5 x i8]* @class_name.Main, i32 0, i32 0) }
; String constants used in the program
@string_constant.strEmpty = internal constant [1 x i8] c"\00"

@_string_constant.strEmpty = global %struct.TString { %struct.__lcpl_rtti* bitcast(%struct.RString* @RString to %struct.__lcpl_rtti*), i32 0, i8* getelementptr ([1 x i8]* @string_constant.strEmpty, i32 0, i32 0)}

; Runtime type information and virtual tables
;
%struct.RMain = type { %struct.TString*, i32, %struct.__lcpl_rtti*, [5 x i8*] }
@RMain = global %struct.RMain{ %struct.TString* @NMain, i32 4, %struct.__lcpl_rtti* bitcast(%struct.RObject* @RObject to %struct.__lcpl_rtti*),
[5 x i8*] [i8* bitcast (void (%struct.TMain*)* @Main_init to i8*)
,	i8* bitcast (void(%struct.TObject*)* @M6_Object_abort to i8*)
,	i8* bitcast (%struct.TString*(%struct.TObject*)* @M6_Object_typeName to i8*)
,	i8* bitcast (%struct.TObject*(%struct.TObject*)* @M6_Object_copy to i8*)
,	i8* bitcast (void(%struct.TMain*)* @M4_Main_main to i8*)
]}
; Class initializer (constructor) forMain
define void @Main_init(%struct.TMain* %self) {
%1 = alloca %struct.TMain*
store %struct.TMain* %self, %struct.TMain** %1
%2 = load %struct.TMain** %1
%3 = bitcast %struct.TMain* %2 to %struct.TObject*
call void @Object_init(%struct.TObject* %3)

ret void
}

define void @M4_Main_main (%struct.TMain* %self) {
	; Prologue - save parameters
	%1 = alloca %struct.TMain*
	store %struct.TMain* %self, %struct.TMain** %1

	%2 = alloca i32
	store i32 0, i32* %2
	%3 = alloca i32
	store i32 10, i32* %3
	%4 = alloca i32
	store i32 20, i32* %4
	%5 = load i32* %3
	%6 = load i32* %4
	%7 = mul i32 2, %6
	%8 = add i32 %5, %7
	store i32 %8, i32* %2
	%9 = alloca i32
	store i32 0, i32* %9
	%10 = alloca i32
	store i32 50, i32* %10
	%11 = alloca i32
	store i32 30, i32* %11
	%12 = load i32* %2
	%13 = load i32* %10
	%14 = add i32 %12, %13
	%15 = load i32* %4
	%16 = add i32 %14, %15
	%17 = load i32* %11
	%18 = add i32 %16, %17
	store i32 %18, i32* %2
	%19 = alloca i32
	store i32 20, i32* %19
	%20 = load i32* %2
	%21 = load i32* %4
	%22 = mul i32 3, %21
	%23 = load i32* %19
	%24 = load i32* %4
%25 = icmp ult i32 %24, 30
%26 = zext i1 %25 to i32	%27 = icmp ne i32 %26, 0
	br i1 %27, label %L0, label %L1
L0:
	%28 = alloca i32
	store i32 100, i32* %28
	%29 = load i32* %10
	%30 = load i32* %28
	%31 = mul i32 %29, %30
L1:
	%32 = phi i32 [ %31, %L2 ], [ %31, %L2 ]
	%33 = mul i32 %23, %32
	%34 = mul i32 %22, %33
	%35 = load i32* %11
	%36 = mul i32 %34, %35
	%37 = sub i32 %20, %36
	store i32 %37, i32* %2
	store i32 %37, i32* %9
	%38 = call i8* @__lcpl_new(%struct.__lcpl_rtti* bitcast (%struct.RIO* @RIO to %struct.__lcpl_rtti*))
	%39 = bitcast i8* %38 to %struct.TIO*
	%40 = bitcast %struct.TIO* %39 to i8*         ; Null ptr check
	call void @__lcpl_checkNull(i8* %40)
	%41 = getelementptr %struct.TIO* %39, i32 0, i32 0   ; Locate address of RTTI pointer
	%42 = load %struct.__lcpl_rtti** %41         ; Load RTTI pointer
	%43 = getelementptr %struct.__lcpl_rtti* %42, i32 0, i32 3, i32 5
	%44 = load i8** %43
	%45 = bitcast i8* %44 to %struct.TIO* (%struct.TIO*, %struct.TString*)*  ; Convert char * into function pointer
	%46 = load i32* %2
	%47 = call %struct.TString* @__lcpl_intToString(i32 %46)
	%48 = call %struct.TIO* %45(%struct.TIO* %39, %struct.TString* %47)

	ret void
}
define void @startup() {
	%1 = call i8* @__lcpl_new(%struct.__lcpl_rtti* bitcast (%struct.RMain* @RMain to %struct.__lcpl_rtti*))
	%2 = bitcast i8* %1 to %struct.TMain*                       ; Convert char * into destination type
	; Dispatch to main method
	%3 = bitcast %struct.TMain* %2 to i8*
	call void @__lcpl_checkNull(i8* %3)
	%4 = getelementptr %struct.TMain* %2, i32 0, i32 0
	%5 = load %struct.__lcpl_rtti** %4
	%6 = getelementptr %struct.__lcpl_rtti* %5, i32 0, i32 3
	%7 = bitcast [0 x i8*]* %6 to i8**
	%8 = getelementptr i8** %7, i32 4
	%9 = load i8** %8
	%10 = bitcast i8* %9 to void (%struct.TMain*)*
	call void %10(%struct.TMain* %2)
	ret void
}
