;;;;;;; Standard data types from runtime
%struct.TObject = type { %struct.__lcpl_rtti* }
%struct.TString = type { %struct.__lcpl_rtti*, i32, i8* }
%struct.TIO = type { %struct.__lcpl_rtti* }
%struct.__lcpl_rtti = type { %struct.TString*, i32, %struct.__lcpl_rtti*, [0 x i8*] }


%struct.RObject = type %struct.__lcpl_rtti*
@RObject = external global %struct.RObject
%struct.RString = type %struct.__lcpl_rtti*
@RString = external global %struct.RString
%struct.RIO = type %struct.__lcpl_rtti*
@RIO = external global %struct.RIO
declare void @Object_init(%struct.TObject*)
declare void @M6_Object_abort(%struct.TObject*)
declare %struct.TString* @M6_Object_typeName(%struct.TObject*)
declare %struct.TObject* @M6_Object_copy(%struct.TObject*)
declare void @IO_init(%struct.TIO*)
declare %struct.TString* @M2_IO_in(%struct.TIO*)
declare %struct.TIO* @M2_IO_out(%struct.TIO*, %struct.TString*)
declare void @String_init(%struct.TString*)
declare i32 @M6_String_length(%struct.TString*)
declare i32 @M6_String_toInt(%struct.TString*)
declare %struct.TString* @M6_String_substring(%struct.TString*, i32, i32)
declare %struct.TString* @M6_String_concat(%struct.TString*, %struct.TString*)
declare i32 @M6_String_equal(%struct.TString*, %struct.TString*)


declare i8* @__lcpl_new(%struct.__lcpl_rtti*)
declare void @__lcpl_checkNull(i8*)
declare i8* @__lcpl_cast(i8*, %struct.__lcpl_rtti*)
declare %struct.TString* @__lcpl_intToString(i32)
;;;;;;; Custom code
;
; Structure of classes
;
%struct.TMain = type { %struct.__lcpl_rtti* }
; Name of classes
@class_name.Main = internal constant [5 x i8] c"Main\00"
@NMain = global %struct.TString { %struct.__lcpl_rtti* bitcast(%struct.RString* @RString to %struct.__lcpl_rtti*), i32 4, i8* getelementptr ([5 x i8]* @class_name.Main, i32 0, i32 0) }
; String constants used in the program
@string_constant.strEmpty = internal constant [1 x i8] c"\00"

@_string_constant.strEmpty = global %struct.TString { %struct.__lcpl_rtti* bitcast(%struct.RString* @RString to %struct.__lcpl_rtti*), i32 0, i8* getelementptr ([1 x i8]* @string_constant.strEmpty, i32 0, i32 0)}

@string_constant.0 = constant [1 x i8] c"\00"
@_string_constant.0 = global %struct.TString { %struct.__lcpl_rtti* bitcast(%struct.RString* @RString to %struct.__lcpl_rtti*), i32 0, i8* getelementptr ([1 x i8]* @string_constant.0, i32 0, i32 0) }
@string_constant.1 = constant [1 x i8] c"\00"
@_string_constant.1 = global %struct.TString { %struct.__lcpl_rtti* bitcast(%struct.RString* @RString to %struct.__lcpl_rtti*), i32 0, i8* getelementptr ([1 x i8]* @string_constant.1, i32 0, i32 0) }
@string_constant.2 = constant [2 x i8] c"|\00"
@_string_constant.2 = global %struct.TString { %struct.__lcpl_rtti* bitcast(%struct.RString* @RString to %struct.__lcpl_rtti*), i32 1, i8* getelementptr ([2 x i8]* @string_constant.2, i32 0, i32 0) }
@string_constant.3 = constant [16 x i8] c"Hello|my|world!\00"
@_string_constant.3 = global %struct.TString { %struct.__lcpl_rtti* bitcast(%struct.RString* @RString to %struct.__lcpl_rtti*), i32 15, i8* getelementptr ([16 x i8]* @string_constant.3, i32 0, i32 0) }
; Runtime type information and virtual tables
;
%struct.RMain = type { %struct.TString*, i32, %struct.__lcpl_rtti*, [9 x i8*] }
@RMain = global %struct.RMain{ %struct.TString* @NMain, i32 4, %struct.__lcpl_rtti* bitcast(%struct.RIO* @RIO to %struct.__lcpl_rtti*),
[9 x i8*] [i8* bitcast (void (%struct.TMain*)* @Main_init to i8*)
,	i8* bitcast (void(%struct.TObject*)* @M6_Object_abort to i8*)
,	i8* bitcast (%struct.TString*(%struct.TObject*)* @M6_Object_typeName to i8*)
,	i8* bitcast (%struct.TObject*(%struct.TObject*)* @M6_Object_copy to i8*)
,	i8* bitcast (%struct.TString*(%struct.TIO*)* @M2_IO_in to i8*)
,	i8* bitcast (%struct.TIO*(%struct.TIO*, %struct.TString*)* @M2_IO_out to i8*)
,	i8* bitcast (%struct.TString*(%struct.TMain*, %struct.TString*)* @M4_Main_extractMiddle to i8*)
,	i8* bitcast (i32(%struct.TMain*, %struct.TString*, i32)* @M4_Main_search0 to i8*)
,	i8* bitcast (void(%struct.TMain*)* @M4_Main_main to i8*)
]}
; Class initializer (constructor) forMain
define void @Main_init(%struct.TMain* %self) {
%1 = alloca %struct.TMain*
store %struct.TMain* %self, %struct.TMain** %1
%2 = load %struct.TMain** %1
%3 = bitcast %struct.TMain* %2 to %struct.TIO*
call void @IO_init(%struct.TIO* %3)

ret void
}

define %struct.TString* @M4_Main_extractMiddle (%struct.TMain* %self, %struct.TString* %in) {
	; Prologue - save parameters
	%1 = alloca %struct.TMain*
	store %struct.TMain* %self, %struct.TMain** %1

	%2 = alloca %struct.TString*
	store %struct.TString* %in, %struct.TString** %2
	%3 = alloca i32
	store i32 0, i32* %3
	%4 = alloca i32
	store i32 0, i32* %4
	%5 = load %struct.TMain** %1
	%6 = bitcast %struct.TMain* %5 to i8*         ; Null ptr check
	call void @__lcpl_checkNull(i8* %6)
	%7 = getelementptr %struct.TMain* %5, i32 0, i32 0   ; Locate address of RTTI pointer
	%8 = load %struct.__lcpl_rtti** %7         ; Load RTTI pointer
	%9 = getelementptr %struct.__lcpl_rtti* %8, i32 0, i32 3, i32 7
	%10 = load i8** %9
	%11 = bitcast i8* %10 to i32 (%struct.TMain*, %struct.TString*, i32)*  ; Convert char * into function pointer
	%12 = load %struct.TString** %2
	%13 = call i32 %11(%struct.TMain* %5, %struct.TString* %12, i32 0)

	store i32 %13, i32* %3
	%14 = load i32* %3
%15 = icmp ule i32 0, %14
%16 = zext i1 %15 to i32	%17 = icmp ne i32 %16, 0
	br i1 %17, label %L0, label %L1
L0:
	%18 = load %struct.TMain** %1
	%19 = bitcast %struct.TMain* %18 to i8*         ; Null ptr check
	call void @__lcpl_checkNull(i8* %19)
	%20 = getelementptr %struct.TMain* %18, i32 0, i32 0   ; Locate address of RTTI pointer
	%21 = load %struct.__lcpl_rtti** %20         ; Load RTTI pointer
	%22 = getelementptr %struct.__lcpl_rtti* %21, i32 0, i32 3, i32 7
	%23 = load i8** %22
	%24 = bitcast i8* %23 to i32 (%struct.TMain*, %struct.TString*, i32)*  ; Convert char * into function pointer
	%25 = load %struct.TString** %2
	%26 = load i32* %3
	%27 = add i32 %26, 1
	%28 = call i32 %24(%struct.TMain* %18, %struct.TString* %25, i32 %27)

	store i32 %28, i32* %4
	%29 = load i32* %4
%30 = icmp ule i32 0, %29
%31 = zext i1 %30 to i32	%32 = icmp ne i32 %31, 0
	br i1 %32, label %L3, label %L4
L3:
	%33 = load i32* %3
	%34 = add i32 %33, 1
	%35 = load i32* %4
	%36 = load %struct.TString** %2
	%37 = call %struct.TString* @M6_String_substring(%struct.TString* %%36, i32 %%34, i32 %35)
L4:
