;;;;;;; Standard data types from runtime
%struct.TObject = type { %struct.__lcpl_rtti* }
%struct.TString = type { %struct.__lcpl_rtti*, i32, i8* }
%struct.TIO = type { %struct.__lcpl_rtti* }
%struct.__lcpl_rtti = type { %struct.TString*, i32, %struct.__lcpl_rtti*, [0 x i8*] }


%struct.RObject = type %struct.__lcpl_rtti*
@RObject = external global %struct.RObject
%struct.RString = type %struct.__lcpl_rtti*
@RString = external global %struct.RString
%struct.RIO = type %struct.__lcpl_rtti*
@RIO = external global %struct.RIO
declare void @Object_init(%struct.TObject*)
declare void @M6_Object_abort(%struct.TObject*)
declare %struct.TString* @M6_Object_typeName(%struct.TObject*)
declare %struct.TObject* @M6_Object_copy(%struct.TObject*)
declare void @IO_init(%struct.TIO*)
declare %struct.TString* @M2_IO_in(%struct.TIO*)
declare %struct.TIO* @M2_IO_out(%struct.TIO*, %struct.TString*)
declare void @String_init(%struct.TString*)
declare i32 @M6_String_length(%struct.TString*)
declare i32 @M6_String_toInt(%struct.TString*)
declare %struct.TString* @M6_String_substring(%struct.TString*, i32, i32)
declare %struct.TString* @M6_String_concat(%struct.TString*, %struct.TString*)
declare i32 @M6_String_equal(%struct.TString*, %struct.TString*)


declare i8* @__lcpl_new(%struct.__lcpl_rtti*)
declare void @__lcpl_checkNull(i8*)
declare i8* @__lcpl_cast(i8*, %struct.__lcpl_rtti*)
declare %struct.TString* @__lcpl_intToString(i32)
;;;;;;; Custom code
;
; Structure of classes
;
%struct.TMatrix = type { %struct.__lcpl_rtti* , i32, i32, i32, i32, i32, i32, i32, i32, i32}
%struct.TMain = type { %struct.__lcpl_rtti* , i32, i32}
; Name of classes
@class_name.Matrix = internal constant [7 x i8] c"Matrix\00"
@NMatrix = global %struct.TString { %struct.__lcpl_rtti* bitcast(%struct.RString* @RString to %struct.__lcpl_rtti*), i32 6, i8* getelementptr ([7 x i8]* @class_name.Matrix, i32 0, i32 0) }
@class_name.Main = internal constant [5 x i8] c"Main\00"
@NMain = global %struct.TString { %struct.__lcpl_rtti* bitcast(%struct.RString* @RString to %struct.__lcpl_rtti*), i32 4, i8* getelementptr ([5 x i8]* @class_name.Main, i32 0, i32 0) }
; String constants used in the program
@string_constant.strEmpty = internal constant [1 x i8] c"\00"

@_string_constant.strEmpty = global %struct.TString { %struct.__lcpl_rtti* bitcast(%struct.RString* @RString to %struct.__lcpl_rtti*), i32 0, i8* getelementptr ([1 x i8]* @string_constant.strEmpty, i32 0, i32 0)}

@string_constant.0 = constant [2 x i8] c" \00"
@_string_constant.0 = global %struct.TString { %struct.__lcpl_rtti* bitcast(%struct.RString* @RString to %struct.__lcpl_rtti*), i32 1, i8* getelementptr ([2 x i8]* @string_constant.0, i32 0, i32 0) }
; Runtime type information and virtual tables
;
%struct.RMatrix = type { %struct.TString*, i32, %struct.__lcpl_rtti*, [6 x i8*] }
@RMatrix = global %struct.RMatrix{ %struct.TString* @NMatrix, i32 31, %struct.__lcpl_rtti* bitcast(%struct.RObject* @RObject to %struct.__lcpl_rtti*),
[6 x i8*] [i8* bitcast (void (%struct.TMatrix*)* @Matrix_init to i8*)
,	i8* bitcast (void(%struct.TObject*)* @M6_Object_abort to i8*)
,	i8* bitcast (%struct.TString*(%struct.TObject*)* @M6_Object_typeName to i8*)
,	i8* bitcast (%struct.TObject*(%struct.TObject*)* @M6_Object_copy to i8*)
,	i8* bitcast (%struct.TMatrix*(%struct.TMatrix*, i32, i32, i32, i32, i32, i32, i32, i32, i32)* @M6_Matrix_init to i8*)
,	i8* bitcast (i32(%struct.TMatrix*)* @M6_Matrix_det to i8*)
]}
%struct.RMain = type { %struct.TString*, i32, %struct.__lcpl_rtti*, [7 x i8*] }
@RMain = global %struct.RMain{ %struct.TString* @NMain, i32 10, %struct.__lcpl_rtti* bitcast(%struct.RObject* @RObject to %struct.__lcpl_rtti*),
[7 x i8*] [i8* bitcast (void (%struct.TMain*)* @Main_init to i8*)
,	i8* bitcast (void(%struct.TObject*)* @M6_Object_abort to i8*)
,	i8* bitcast (%struct.TString*(%struct.TObject*)* @M6_Object_typeName to i8*)
,	i8* bitcast (%struct.TObject*(%struct.TObject*)* @M6_Object_copy to i8*)
,	i8* bitcast (i32(%struct.TMain*, i32)* @M4_Main_factorial to i8*)
,	i8* bitcast (i32(%struct.TMain*, i32, i32)* @M4_Main_taylor to i8*)
,	i8* bitcast (void(%struct.TMain*)* @M4_Main_main to i8*)
]}
; Class initializer (constructor) forMatrix
define void @Matrix_init(%struct.TMatrix* %self) {
%1 = alloca %struct.TMatrix*
store %struct.TMatrix* %self, %struct.TMatrix** %1
%2 = load %struct.TMatrix** %1
%3 = bitcast %struct.TMatrix* %2 to %struct.TObject*
call void @Object_init(%struct.TObject* %3)

%4 = getelementptr %struct.TMatrix* %2, i32 0, i32 1
store i32 0, i32* %4
%5 = getelementptr %struct.TMatrix* %2, i32 0, i32 2
store i32 0, i32* %5
%6 = getelementptr %struct.TMatrix* %2, i32 0, i32 3
store i32 0, i32* %6
%7 = getelementptr %struct.TMatrix* %2, i32 0, i32 4
store i32 0, i32* %7
%8 = getelementptr %struct.TMatrix* %2, i32 0, i32 5
store i32 0, i32* %8
%9 = getelementptr %struct.TMatrix* %2, i32 0, i32 6
store i32 0, i32* %9
%10 = getelementptr %struct.TMatrix* %2, i32 0, i32 7
store i32 0, i32* %10
%11 = getelementptr %struct.TMatrix* %2, i32 0, i32 8
store i32 0, i32* %11
%12 = getelementptr %struct.TMatrix* %2, i32 0, i32 9
store i32 0, i32* %12
ret void
}
; Class initializer (constructor) forMain
define void @Main_init(%struct.TMain* %self) {
%1 = alloca %struct.TMain*
store %struct.TMain* %self, %struct.TMain** %1
%2 = load %struct.TMain** %1
%3 = bitcast %struct.TMain* %2 to %struct.TObject*
call void @Object_init(%struct.TObject* %3)

%4 = getelementptr %struct.TMain* %2, i32 0, i32 1
store i32 5, i32* %4
%5 = getelementptr %struct.TMain* %2, i32 0, i32 2
store i32 10, i32* %5
ret void
}

define %struct.TMatrix* @M6_Matrix_init (%struct.TMatrix* %self, i32 %va, i32 %vb, i32 %vc, i32 %vd, i32 %ve, i32 %vf, i32 %vg, i32 %vh, i32 %vi) {
	; Prologue - save parameters
	%1 = alloca %struct.TMatrix*
	store %struct.TMatrix* %self, %struct.TMatrix** %1

	%2 = alloca i32
	store i32 %va, i32* %2
	%3 = alloca i32
	store i32 %vb, i32* %3
	%4 = alloca i32
	store i32 %vc, i32* %4
	%5 = alloca i32
	store i32 %vd, i32* %5
	%6 = alloca i32
	store i32 %ve, i32* %6
	%7 = alloca i32
	store i32 %vf, i32* %7
	%8 = alloca i32
	store i32 %vg, i32* %8
	%9 = alloca i32
	store i32 %vh, i32* %9
	%10 = alloca i32
	store i32 %vi, i32* %10
	%11 = load i32* %2
	%12 = load %struct.TMatrix** %1
	%13 = getelementptr %struct.TMatrix* %12, i32 0, i32 1
	store i32 %11, i32* %13
	%14 = load i32* %3
	%15 = load %struct.TMatrix** %1
	%16 = getelementptr %struct.TMatrix* %15, i32 0, i32 2
	store i32 %14, i32* %16
	%17 = load i32* %4
	%18 = load %struct.TMatrix** %1
	%19 = getelementptr %struct.TMatrix* %18, i32 0, i32 3
	store i32 %17, i32* %19
	%20 = load i32* %5
	%21 = load %struct.TMatrix** %1
	%22 = getelementptr %struct.TMatrix* %21, i32 0, i32 4
	store i32 %20, i32* %22
	%23 = load i32* %6
	%24 = load %struct.TMatrix** %1
	%25 = getelementptr %struct.TMatrix* %24, i32 0, i32 5
	store i32 %23, i32* %25
	%26 = load i32* %7
	%27 = load %struct.TMatrix** %1
	%28 = getelementptr %struct.TMatrix* %27, i32 0, i32 6
	store i32 %26, i32* %28
	%29 = load i32* %8
	%30 = load %struct.TMatrix** %1
	%31 = getelementptr %struct.TMatrix* %30, i32 0, i32 7
	store i32 %29, i32* %31
	%32 = load i32* %9
	%33 = load %struct.TMatrix** %1
	%34 = getelementptr %struct.TMatrix* %33, i32 0, i32 8
	store i32 %32, i32* %34
	%35 = load i32* %10
	%36 = load %struct.TMatrix** %1
	%37 = getelementptr %struct.TMatrix* %36, i32 0, i32 9
	store i32 %35, i32* %37
	%38 = load %struct.TMatrix** %1
	ret %struct.TMatrix* %38
}
define i32 @M6_Matrix_det (%struct.TMatrix* %self) {
	; Prologue - save parameters
	%1 = alloca %struct.TMatrix*
	store %struct.TMatrix* %self, %struct.TMatrix** %1

	%2 = load %struct.TMatrix** %1
	%3 = getelementptr %struct.TMatrix* %2, i32 0, i32 1
	%4 = load i32* %3
	%5 = load %struct.TMatrix** %1
	%6 = getelementptr %struct.TMatrix* %5, i32 0, i32 5
	%7 = load i32* %6
	%8 = mul i32 %4, %7
	%9 = load %struct.TMatrix** %1
	%10 = getelementptr %struct.TMatrix* %9, i32 0, i32 9
	%11 = load i32* %10
	%12 = mul i32 %8, %11
	%13 = load %struct.TMatrix** %1
	%14 = getelementptr %struct.TMatrix* %13, i32 0, i32 2
	%15 = load i32* %14
	%16 = load %struct.TMatrix** %1
	%17 = getelementptr %struct.TMatrix* %16, i32 0, i32 6
	%18 = load i32* %17
	%19 = mul i32 %15, %18
	%20 = load %struct.TMatrix** %1
	%21 = getelementptr %struct.TMatrix* %20, i32 0, i32 7
	%22 = load i32* %21
	%23 = mul i32 %19, %22
	%24 = add i32 %12, %23
	%25 = load %struct.TMatrix** %1
	%26 = getelementptr %struct.TMatrix* %25, i32 0, i32 3
	%27 = load i32* %26
	%28 = load %struct.TMatrix** %1
	%29 = getelementptr %struct.TMatrix* %28, i32 0, i32 4
	%30 = load i32* %29
	%31 = mul i32 %27, %30
	%32 = load %struct.TMatrix** %1
	%33 = getelementptr %struct.TMatrix* %32, i32 0, i32 8
	%34 = load i32* %33
	%35 = mul i32 %31, %34
	%36 = add i32 %24, %35
	%37 = load %struct.TMatrix** %1
	%38 = getelementptr %struct.TMatrix* %37, i32 0, i32 7
	%39 = load i32* %38
	%40 = load %struct.TMatrix** %1
	%41 = getelementptr %struct.TMatrix* %40, i32 0, i32 5
	%42 = load i32* %41
	%43 = mul i32 %39, %42
	%44 = load %struct.TMatrix** %1
	%45 = getelementptr %struct.TMatrix* %44, i32 0, i32 3
	%46 = load i32* %45
	%47 = mul i32 %43, %46
	%48 = load %struct.TMatrix** %1
	%49 = getelementptr %struct.TMatrix* %48, i32 0, i32 8
	%50 = load i32* %49
	%51 = load %struct.TMatrix** %1
	%52 = getelementptr %struct.TMatrix* %51, i32 0, i32 6
	%53 = load i32* %52
	%54 = mul i32 %50, %53
	%55 = load %struct.TMatrix** %1
	%56 = getelementptr %struct.TMatrix* %55, i32 0, i32 1
	%57 = load i32* %56
	%58 = mul i32 %54, %57
	%59 = add i32 %47, %58
	%60 = load %struct.TMatrix** %1
	%61 = getelementptr %struct.TMatrix* %60, i32 0, i32 9
	%62 = load i32* %61
	%63 = load %struct.TMatrix** %1
	%64 = getelementptr %struct.TMatrix* %63, i32 0, i32 4
	%65 = load i32* %64
	%66 = mul i32 %62, %65
	%67 = load %struct.TMatrix** %1
	%68 = getelementptr %struct.TMatrix* %67, i32 0, i32 2
	%69 = load i32* %68
	%70 = mul i32 %66, %69
	%71 = add i32 %59, %70
	%72 = sub i32 %36, %71
	ret i32 %72
}
define i32 @M4_Main_factorial (%struct.TMain* %self, i32 %n) {
	; Prologue - save parameters
	%1 = alloca %struct.TMain*
	store %struct.TMain* %self, %struct.TMain** %1

	%2 = alloca i32
	store i32 %n, i32* %2
	%3 = load i32* %2
%4 = icmp ult i32 %3, 1
%5 = zext i1 %4 to i32	%6 = icmp ne i32 %5, 0
	br i1 %6, label %L0, label %L1
L0:
L1:
	%7 = load %struct.TMain** %1
	%8 = bitcast %struct.TMain* %7 to i8*         ; Null ptr check
	call void @__lcpl_checkNull(i8* %8)
	%9 = getelementptr %struct.TMain* %7, i32 0, i32 0   ; Locate address of RTTI pointer
	%10 = load %struct.__lcpl_rtti** %9         ; Load RTTI pointer
	%11 = getelementptr %struct.__lcpl_rtti* %10, i32 0, i32 3, i32 4
	%12 = load i8** %11
	%13 = bitcast i8* %12 to i32 (%struct.TMain*, i32)*  ; Convert char * into function pointer
	%14 = load i32* %2
	%15 = sub i32 %14, 1
	%16 = call i32 %13(%struct.TMain* %7, i32 %15)

	%17 = phi i32 [ 1, %L2 ], [ %16, %L2 ]
	ret i32 %17
}
define i32 @M4_Main_taylor (%struct.TMain* %self, i32 %n, i32 %m) {
	; Prologue - save parameters
	%1 = alloca %struct.TMain*
	store %struct.TMain* %self, %struct.TMain** %1

	%2 = alloca i32
	store i32 %n, i32* %2
	%3 = alloca i32
	store i32 %m, i32* %3
	%4 = alloca i32
	store i32 0, i32* %4
	%5 = alloca i32
	store i32 0, i32* %5
	%6 = alloca i32
	store i32 1, i32* %6
