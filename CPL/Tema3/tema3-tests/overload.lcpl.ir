;;;;;;; Standard data types from runtime
%struct.TObject = type { %struct.__lcpl_rtti* }
%struct.TString = type { %struct.__lcpl_rtti*, i32, i8* }
%struct.TIO = type { %struct.__lcpl_rtti* }
%struct.__lcpl_rtti = type { %struct.TString*, i32, %struct.__lcpl_rtti*, [0 x i8*] }


%struct.RObject = type %struct.__lcpl_rtti*
@RObject = external global %struct.RObject
%struct.RString = type %struct.__lcpl_rtti*
@RString = external global %struct.RString
%struct.RIO = type %struct.__lcpl_rtti*
@RIO = external global %struct.RIO
declare void @Object_init(%struct.TObject*)
declare void @M6_Object_abort(%struct.TObject*)
declare %struct.TString* @M6_Object_typeName(%struct.TObject*)
declare %struct.TObject* @M6_Object_copy(%struct.TObject*)
declare void @IO_init(%struct.TIO*)
declare %struct.TString* @M2_IO_in(%struct.TIO*)
declare %struct.TIO* @M2_IO_out(%struct.TIO*, %struct.TString*)
declare void @String_init(%struct.TString*)
declare i32 @M6_String_length(%struct.TString*)
declare i32 @M6_String_toInt(%struct.TString*)
declare %struct.TString* @M6_String_substring(%struct.TString*, i32, i32)
declare %struct.TString* @M6_String_concat(%struct.TString*, %struct.TString*)
declare i32 @M6_String_equal(%struct.TString*, %struct.TString*)


declare i8* @__lcpl_new(%struct.__lcpl_rtti*)
declare void @__lcpl_checkNull(i8*)
declare i8* @__lcpl_cast(i8*, %struct.__lcpl_rtti*)
declare %struct.TString* @__lcpl_intToString(i32)
;;;;;;; Custom code
;
; Structure of classes
;
%struct.Ti = type { %struct.__lcpl_rtti* , i32, i32}
%struct.Tj = type { %struct.__lcpl_rtti* , i32}
%struct.TMain = type { %struct.__lcpl_rtti* , %struct.Tj*}
; Name of classes
@class_name.i = internal constant [2 x i8] c"i\00"
@Ni = global %struct.TString { %struct.__lcpl_rtti* bitcast(%struct.RString* @RString to %struct.__lcpl_rtti*), i32 1, i8* getelementptr ([2 x i8]* @class_name.i, i32 0, i32 0) }
@class_name.j = internal constant [2 x i8] c"j\00"
@Nj = global %struct.TString { %struct.__lcpl_rtti* bitcast(%struct.RString* @RString to %struct.__lcpl_rtti*), i32 1, i8* getelementptr ([2 x i8]* @class_name.j, i32 0, i32 0) }
@class_name.Main = internal constant [5 x i8] c"Main\00"
@NMain = global %struct.TString { %struct.__lcpl_rtti* bitcast(%struct.RString* @RString to %struct.__lcpl_rtti*), i32 4, i8* getelementptr ([5 x i8]* @class_name.Main, i32 0, i32 0) }
; String constants used in the program
@string_constant.strEmpty = internal constant [1 x i8] c"\00"

@_string_constant.strEmpty = global %struct.TString { %struct.__lcpl_rtti* bitcast(%struct.RString* @RString to %struct.__lcpl_rtti*), i32 0, i8* getelementptr ([1 x i8]* @string_constant.strEmpty, i32 0, i32 0)}

@string_constant.0 = constant [2 x i8] c"\0A\00"
@_string_constant.0 = global %struct.TString { %struct.__lcpl_rtti* bitcast(%struct.RString* @RString to %struct.__lcpl_rtti*), i32 1, i8* getelementptr ([2 x i8]* @string_constant.0, i32 0, i32 0) }
; Runtime type information and virtual tables
;
%struct.Ri = type { %struct.TString*, i32, %struct.__lcpl_rtti*, [7 x i8*] }
@Ri = global %struct.Ri{ %struct.TString* @Ni, i32 10, %struct.__lcpl_rtti* bitcast(%struct.Rj* @Rj to %struct.__lcpl_rtti*),
[7 x i8*] [i8* bitcast (void (%struct.Ti*)* @i_init to i8*)
,	i8* bitcast (void(%struct.TObject*)* @M6_Object_abort to i8*)
,	i8* bitcast (%struct.TString*(%struct.TObject*)* @M6_Object_typeName to i8*)
,	i8* bitcast (%struct.TObject*(%struct.TObject*)* @M6_Object_copy to i8*)
,	i8* bitcast (void(%struct.Ti*)* @M1_i_I to i8*)
,	i8* bitcast (void(%struct.Ti*)* @M1_i_J to i8*)
,	i8* bitcast (i32(%struct.Ti*, i32)* @M1_i_i to i8*)
]}
%struct.Rj = type { %struct.TString*, i32, %struct.__lcpl_rtti*, [4 x i8*] }
@Rj = global %struct.Rj{ %struct.TString* @Nj, i32 7, %struct.__lcpl_rtti* bitcast(%struct.RObject* @RObject to %struct.__lcpl_rtti*),
[4 x i8*] [i8* bitcast (void (%struct.Tj*)* @j_init to i8*)
,	i8* bitcast (void(%struct.TObject*)* @M6_Object_abort to i8*)
,	i8* bitcast (%struct.TString*(%struct.TObject*)* @M6_Object_typeName to i8*)
,	i8* bitcast (%struct.TObject*(%struct.TObject*)* @M6_Object_copy to i8*)
]}
%struct.RMain = type { %struct.TString*, i32, %struct.__lcpl_rtti*, [5 x i8*] }
@RMain = global %struct.RMain{ %struct.TString* @NMain, i32 7, %struct.__lcpl_rtti* bitcast(%struct.RObject* @RObject to %struct.__lcpl_rtti*),
[5 x i8*] [i8* bitcast (void (%struct.TMain*)* @Main_init to i8*)
,	i8* bitcast (void(%struct.TObject*)* @M6_Object_abort to i8*)
,	i8* bitcast (%struct.TString*(%struct.TObject*)* @M6_Object_typeName to i8*)
,	i8* bitcast (%struct.TObject*(%struct.TObject*)* @M6_Object_copy to i8*)
,	i8* bitcast (void(%struct.TMain*)* @M4_Main_main to i8*)
]}
; Class initializer (constructor) fori
define void @i_init(%struct.Ti* %self) {
%1 = alloca %struct.Ti*
store %struct.Ti* %self, %struct.Ti** %1
%2 = load %struct.Ti** %1
%3 = bitcast %struct.Ti* %2 to %struct.Tj*
call void @j_init(%struct.Tj* %3)

%4 = getelementptr %struct.Ti* %2, i32 0, i32 1
store i32 0, i32* %4
ret void
}
; Class initializer (constructor) forj
define void @j_init(%struct.Tj* %self) {
%1 = alloca %struct.Tj*
store %struct.Tj* %self, %struct.Tj** %1
%2 = load %struct.Tj** %1
%3 = bitcast %struct.Tj* %2 to %struct.TObject*
call void @Object_init(%struct.TObject* %3)

%4 = getelementptr %struct.Tj* %2, i32 0, i32 1
store i32 0, i32* %4
ret void
}
; Class initializer (constructor) forMain
define void @Main_init(%struct.TMain* %self) {
%1 = alloca %struct.TMain*
store %struct.TMain* %self, %struct.TMain** %1
%2 = load %struct.TMain** %1
%3 = bitcast %struct.TMain* %2 to %struct.TObject*
call void @Object_init(%struct.TObject* %3)

%4 = getelementptr %struct.TMain* %2, i32 0, i32 1
	%5 = call i8* @__lcpl_new(%struct.__lcpl_rtti* bitcast (%struct.Ri* @Ri to %struct.__lcpl_rtti*))
	%6 = bitcast i8* %5 to %struct.Ti*
	%7 = bitcast %struct.Ti* %6 to i8*
	%8 = call i8* @__lcpl_cast(i8* %7, %struct.__lcpl_rtti* bitcast (%struct.Rj* @Rj to %struct.__lcpl_rtti*))
	%9 = bitcast i8* %8 to %struct.Tj*
store %struct.Tj* %9, %struct.Tj** %4
ret void
}

define void @M1_i_I (%struct.Ti* %self) {
	; Prologue - save parameters
	%1 = alloca %struct.Ti*
	store %struct.Ti* %self, %struct.Ti** %1

	%2 = load %struct.Ti** %1
	%3 = getelementptr %struct.Ti* %2, i32 0, i32 1
	%4 = load i32* %3
	%5 = load %struct.Ti** %1
	%6 = getelementptr %struct.Ti* %5, i32 0, i32 2
	store i32 %4, i32* %6
	ret void
}
define void @M1_i_J (%struct.Ti* %self) {
	; Prologue - save parameters
	%1 = alloca %struct.Ti*
	store %struct.Ti* %self, %struct.Ti** %1

	%2 = load %struct.Ti** %1
	%3 = getelementptr %struct.Ti* %2, i32 0, i32 2
	%4 = load i32* %3
	%5 = load %struct.Ti** %1
	%6 = getelementptr %struct.Ti* %5, i32 0, i32 1
	store i32 %4, i32* %6
	ret void
}
define i32 @M1_i_i (%struct.Ti* %self, i32 %i) {
	; Prologue - save parameters
	%1 = alloca %struct.Ti*
	store %struct.Ti* %self, %struct.Ti** %1

	%2 = alloca i32
	store i32 %i, i32* %2
	%3 = load i32* %2
	%4 = add i32 %3, 1
	%5 = load %struct.Ti** %1
	%6 = getelementptr %struct.Ti* %5, i32 0, i32 1
	store i32 %4, i32* %6
	%7 = load %struct.Ti** %1
	%8 = bitcast %struct.Ti* %7 to i8*         ; Null ptr check
	call void @__lcpl_checkNull(i8* %8)
	%9 = getelementptr %struct.Ti* %7, i32 0, i32 0   ; Locate address of RTTI pointer
	%10 = load %struct.__lcpl_rtti** %9         ; Load RTTI pointer
	%11 = getelementptr %struct.__lcpl_rtti* %10, i32 0, i32 3, i32 4
	%12 = load i8** %11
	%13 = bitcast i8* %12 to void (%struct.Ti*)*  ; Convert char * into function pointer
	call void %13(%struct.Ti* %7)

	%14 = load i32* %2
	%15 = mul i32 %14, 2
	%16 = load %struct.Ti** %1
	%17 = getelementptr %struct.Ti* %16, i32 0, i32 1
	store i32 %15, i32* %17
	%18 = alloca i32
	%19 = load i32* %2
	%20 = add i32 %19, 2
	store i32 %20, i32* %18
	%21 = load i32* %18
	%22 = load %struct.Ti** %1
	%23 = getelementptr %struct.Ti* %22, i32 0, i32 1
	%24 = load i32* %23
	%25 = sub i32 %21, %24
	store i32 %25, i32* %18
	%26 = load %struct.Ti** %1
	%27 = bitcast %struct.Ti* %26 to i8*         ; Null ptr check
	call void @__lcpl_checkNull(i8* %27)
	%28 = getelementptr %struct.Ti* %26, i32 0, i32 0   ; Locate address of RTTI pointer
	%29 = load %struct.__lcpl_rtti** %28         ; Load RTTI pointer
	%30 = getelementptr %struct.__lcpl_rtti* %29, i32 0, i32 3, i32 5
	%31 = load i8** %30
	%32 = bitcast i8* %31 to void (%struct.Ti*)*  ; Convert char * into function pointer
	call void %32(%struct.Ti* %26)

	%33 = load %struct.Ti** %1
	%34 = getelementptr %struct.Ti* %33, i32 0, i32 1
	%35 = load i32* %34
	%36 = load i32* %18
	%37 = mul i32 %35, %36
	ret i32 %37
}
define void @M4_Main_main (%struct.TMain* %self) {
	; Prologue - save parameters
	%1 = alloca %struct.TMain*
	store %struct.TMain* %self, %struct.TMain** %1

	%2 = alloca %struct.Ti*
	%3 = load %struct.TMain** %1
	%4 = getelementptr %struct.TMain* %3, i32 0, i32 1
	%5 = load %struct.Tj** %4
	%6 = bitcast %struct.Tj* %5 to i8*
	%7 = call i8* @__lcpl_cast(i8* %6, %struct.__lcpl_rtti* bitcast (%struct.Ri* @Ri to %struct.__lcpl_rtti*))
	%8 = bitcast i8* %7 to %struct.Ti*
	store %struct.Ti* %8, %struct.Ti** %2
	%9 = call i8* @__lcpl_new(%struct.__lcpl_rtti* bitcast (%struct.RIO* @RIO to %struct.__lcpl_rtti*))
	%10 = bitcast i8* %9 to %struct.TIO*
	%11 = bitcast %struct.TIO* %10 to i8*         ; Null ptr check
	call void @__lcpl_checkNull(i8* %11)
	%12 = getelementptr %struct.TIO* %10, i32 0, i32 0   ; Locate address of RTTI pointer
	%13 = load %struct.__lcpl_rtti** %12         ; Load RTTI pointer
	%14 = getelementptr %struct.__lcpl_rtti* %13, i32 0, i32 3, i32 5
	%15 = load i8** %14
	%16 = bitcast i8* %15 to %struct.TIO* (%struct.TIO*, %struct.TString*)*  ; Convert char * into function pointer
	%17 = load %struct.Ti** %2
	%18 = bitcast %struct.Ti* %17 to i8*         ; Null ptr check
	call void @__lcpl_checkNull(i8* %18)
	%19 = getelementptr %struct.Ti* %17, i32 0, i32 0   ; Locate address of RTTI pointer
	%20 = load %struct.__lcpl_rtti** %19         ; Load RTTI pointer
	%21 = getelementptr %struct.__lcpl_rtti* %20, i32 0, i32 3, i32 6
	%22 = load i8** %21
	%23 = bitcast i8* %22 to i32 (%struct.Ti*, i32)*  ; Convert char * into function pointer
	%24 = call i32 %23(%struct.Ti* %17, i32 4)

	%25 = call %struct.TString* @__lcpl_intToString(i32 %24)
	%26 = call %struct.TIO* %16(%struct.TIO* %10, %struct.TString* %25)

	%27 = bitcast %struct.TIO* %26 to i8*         ; Null ptr check
	call void @__lcpl_checkNull(i8* %27)
	%28 = getelementptr %struct.TIO* %26, i32 0, i32 0   ; Locate address of RTTI pointer
	%29 = load %struct.__lcpl_rtti** %28         ; Load RTTI pointer
	%30 = getelementptr %struct.__lcpl_rtti* %29, i32 0, i32 3, i32 5
	%31 = load i8** %30
	%32 = bitcast i8* %31 to %struct.TIO* (%struct.TIO*, %struct.TString*)*  ; Convert char * into function pointer
	%33 = call %struct.TIO* %32(%struct.TIO* %26, %struct.TString* @_string_constant.0)

	ret void
}
define void @startup() {
	%1 = call i8* @__lcpl_new(%struct.__lcpl_rtti* bitcast (%struct.RMain* @RMain to %struct.__lcpl_rtti*))
	%2 = bitcast i8* %1 to %struct.TMain*                       ; Convert char * into destination type
	; Dispatch to main method
	%3 = bitcast %struct.TMain* %2 to i8*
	call void @__lcpl_checkNull(i8* %3)
	%4 = getelementptr %struct.TMain* %2, i32 0, i32 0
	%5 = load %struct.__lcpl_rtti** %4
	%6 = getelementptr %struct.__lcpl_rtti* %5, i32 0, i32 3
	%7 = bitcast [0 x i8*]* %6 to i8**
	%8 = getelementptr i8** %7, i32 4
	%9 = load i8** %8
	%10 = bitcast i8* %9 to void (%struct.TMain*)*
	call void %10(%struct.TMain* %2)
	ret void
}
