
test_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  0000043e  000004b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000043e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000954  00000000  00000000  000004dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000000b4  00000000  00000000  00000e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00000ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000d4  00000000  00000000  00000f24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000051c  00000000  00000000  00000ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002a6  00000000  00000000  00001514  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000588  00000000  00000000  000017ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  00001d44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001a4  00000000  00000000  00001e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000366  00000000  00000000  00002018  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000056  00000000  00000000  0000237e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__ctors_end>
   4:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
   8:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
   c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  10:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  14:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  18:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  1c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  20:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  24:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  28:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  2c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  30:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  34:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  38:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  3c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  40:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  44:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  48:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  4c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  50:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  54:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  58:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  5c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  60:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  64:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  68:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  6c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  70:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  74:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  78:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>

0000007c <copyRightChar>:
  7c:	07 08 13 14 14 13 08 07 00 10 08 08 08 08 10 00     ................

0000008c <__c.1552>:
  8c:	4c 69 6e 65 20 32 20 6c 6f 6e 67 65 72 20 74 68     Line 2 longer th
  9c:	61 6e 20 31 34 20 63 68 61 72 61 63 74 65 72 73     an 14 characters
	...

000000ad <__c.1550>:
  ad:	4c 69 6e 65 20 31 20 6c 6f 6e 67 65 72 20 74 68     Line 1 longer th
  bd:	61 6e 20 31 34 20 63 68 61 72 61 63 74 65 72 73     an 14 characters
  cd:	0a 00 00                                            ...

000000d0 <__ctors_end>:
  d0:	11 24       	eor	r1, r1
  d2:	1f be       	out	0x3f, r1	; 63
  d4:	cf ef       	ldi	r28, 0xFF	; 255
  d6:	d8 e0       	ldi	r29, 0x08	; 8
  d8:	de bf       	out	0x3e, r29	; 62
  da:	cd bf       	out	0x3d, r28	; 61

000000dc <__do_copy_data>:
  dc:	11 e0       	ldi	r17, 0x01	; 1
  de:	a0 e0       	ldi	r26, 0x00	; 0
  e0:	b1 e0       	ldi	r27, 0x01	; 1
  e2:	ee e3       	ldi	r30, 0x3E	; 62
  e4:	f4 e0       	ldi	r31, 0x04	; 4
  e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x10>
  e8:	05 90       	lpm	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	aa 32       	cpi	r26, 0x2A	; 42
  ee:	b1 07       	cpc	r27, r17
  f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0xc>
  f2:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  f6:	0c 94 1d 02 	jmp	0x43a	; 0x43a <_exit>

000000fa <__bad_interrupt>:
  fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fe <wait_until_key_pressed>:
{
    unsigned char temp1, temp2;
    unsigned int i;
    
    do {
        temp1 = PIND;                  // read input
  fe:	99 b1       	in	r25, 0x09	; 9
        for(i=0;i<65535;i++);
        temp2 = PIND;                  // read input
 100:	89 b1       	in	r24, 0x09	; 9
        temp1 = (temp1 & temp2);       // debounce input
 102:	89 23       	and	r24, r25
    } while ( temp1 & _BV(PIND2) );
 104:	82 fd       	sbrc	r24, 2
 106:	fb cf       	rjmp	.-10     	; 0xfe <wait_until_key_pressed>
    
    loop_until_bit_is_set(PIND,PIND2);            /* wait until key is released */
 108:	4a 9b       	sbis	0x09, 2	; 9
 10a:	fe cf       	rjmp	.-4      	; 0x108 <wait_until_key_pressed+0xa>
}
 10c:	08 95       	ret

0000010e <main>:


int main(void)
{
 10e:	ef 92       	push	r14
 110:	ff 92       	push	r15
 112:	0f 93       	push	r16
 114:	1f 93       	push	r17
 116:	df 93       	push	r29
 118:	cf 93       	push	r28
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
 11e:	27 97       	sbiw	r28, 0x07	; 7
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	f8 94       	cli
 124:	de bf       	out	0x3e, r29	; 62
 126:	0f be       	out	0x3f, r0	; 63
 128:	cd bf       	out	0x3d, r28	; 61
    char buffer[7];
    int  num=134;
    unsigned char i;
    
    
    DDRD &=~ (1 << PD2);        /* Pin PD2 input              */
 12a:	52 98       	cbi	0x0a, 2	; 10
    PORTD |= (1 << PD2);        /* Pin PD2 pull-up enabled    */
 12c:	5a 9a       	sbi	0x0b, 2	; 11


    /* initialize display, cursor off */
    lcd_init(LCD_DISP_ON);
 12e:	8c e0       	ldi	r24, 0x0C	; 12
 130:	0e 94 a4 01 	call	0x348	; 0x348 <lcd_init>
         */
        
        lcd_clrscr();   /* clear display home cursor */
        
        /* convert interger into string */
        itoa( num , buffer, 10);
 134:	8e 01       	movw	r16, r28
 136:	0f 5f       	subi	r16, 0xFF	; 255
 138:	1f 4f       	sbci	r17, 0xFF	; 255
        /* 
         * Test 1:  write text to display
         */

        /* clear display and home cursor */
        lcd_clrscr();
 13a:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_clrscr>
        
        /* put string to display (line 1) with linefeed */
        lcd_puts("LCD Test Line 1\n");
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	0e 94 8a 01 	call	0x314	; 0x314 <lcd_puts>

        /* cursor is now on second line, write second line */
        lcd_puts("Line 2");
 146:	81 e1       	ldi	r24, 0x11	; 17
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	0e 94 8a 01 	call	0x314	; 0x314 <lcd_puts>
        
        /* move cursor to position 8 on line 2 */
        lcd_gotoxy(7,1);  
 14e:	87 e0       	ldi	r24, 0x07	; 7
 150:	61 e0       	ldi	r22, 0x01	; 1
 152:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_gotoxy>
        
        /* write single char to display */
        lcd_putc(':');
 156:	8a e3       	ldi	r24, 0x3A	; 58
 158:	0e 94 75 01 	call	0x2ea	; 0x2ea <lcd_putc>
        
        /* wait until push button PD2 (INT0) is pressed */
        wait_until_key_pressed();
 15c:	0e 94 7f 00 	call	0xfe	; 0xfe <wait_until_key_pressed>
        /*
         * Test 2: use lcd_command() to turn on cursor
         */
        
        /* turn on cursor */
        lcd_command(LCD_DISP_ON_CURSOR);
 160:	8e e0       	ldi	r24, 0x0E	; 14
 162:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_command>

        /* put string */
        lcd_puts( "CurOn");
 166:	88 e1       	ldi	r24, 0x18	; 24
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	0e 94 8a 01 	call	0x314	; 0x314 <lcd_puts>
        
        /* wait until push button PD2 (INT0) is pressed */
        wait_until_key_pressed();
 16e:	0e 94 7f 00 	call	0xfe	; 0xfe <wait_until_key_pressed>

        /*
         * Test 3: display shift
         */
        
        lcd_clrscr();     /* clear display home cursor */
 172:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_clrscr>

        /* put string from program memory to display */
        lcd_puts_P( "Line 1 longer than 14 characters\n" );
 176:	8d ea       	ldi	r24, 0xAD	; 173
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 96 01 	call	0x32c	; 0x32c <lcd_puts_p>
        lcd_puts_P( "Line 2 longer than 14 characters" );
 17e:	8c e8       	ldi	r24, 0x8C	; 140
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 96 01 	call	0x32c	; 0x32c <lcd_puts_p>
        
        /* move BOTH lines one position to the left */
        lcd_command(LCD_MOVE_DISP_LEFT);
 186:	88 e1       	ldi	r24, 0x18	; 24
 188:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_command>
        
        /* wait until push button PD2 (INT0) is pressed */
        wait_until_key_pressed();
 18c:	0e 94 7f 00 	call	0xfe	; 0xfe <wait_until_key_pressed>

        /* turn off cursor */
        lcd_command(LCD_DISP_ON);
 190:	8c e0       	ldi	r24, 0x0C	; 12
 192:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_command>
        
        /*
         *   Test: Display integer values
         */
        
        lcd_clrscr();   /* clear display home cursor */
 196:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_clrscr>
        
        /* convert interger into string */
        itoa( num , buffer, 10);
 19a:	86 e8       	ldi	r24, 0x86	; 134
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	b8 01       	movw	r22, r16
 1a0:	4a e0       	ldi	r20, 0x0A	; 10
 1a2:	50 e0       	ldi	r21, 0x00	; 0
 1a4:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <itoa>
        
        /* put converted string to display */
        lcd_puts(buffer);
 1a8:	c8 01       	movw	r24, r16
 1aa:	0e 94 8a 01 	call	0x314	; 0x314 <lcd_puts>
        
        /* wait until push button PD2 (INT0) is pressed */
        wait_until_key_pressed();
 1ae:	0e 94 7f 00 	call	0xfe	; 0xfe <wait_until_key_pressed>
        
        /*
         *  Test: Display userdefined characters
         */

       lcd_clrscr();   /* clear display home cursor */
 1b2:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_clrscr>
       
       lcd_puts("Copyright: ");
 1b6:	8e e1       	ldi	r24, 0x1E	; 30
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	0e 94 8a 01 	call	0x314	; 0x314 <lcd_puts>
       
       /*
        * load two userdefined characters from program memory
        * into LCD controller CG RAM location 0 and 1
        */
       lcd_command(_BV(LCD_CGRAM));  /* set CG RAM start address 0 */
 1be:	80 e4       	ldi	r24, 0x40	; 64
 1c0:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_command>
 1c4:	ee 24       	eor	r14, r14
 1c6:	ff 24       	eor	r15, r15
       for(i=0; i<16; i++)
       {
           lcd_data(pgm_read_byte_near(&copyRightChar[i]));
 1c8:	f7 01       	movw	r30, r14
 1ca:	e4 58       	subi	r30, 0x84	; 132
 1cc:	ff 4f       	sbci	r31, 0xFF	; 255
 1ce:	84 91       	lpm	r24, Z+
 1d0:	0e 94 57 01 	call	0x2ae	; 0x2ae <lcd_data>
 1d4:	08 94       	sec
 1d6:	e1 1c       	adc	r14, r1
 1d8:	f1 1c       	adc	r15, r1
       /*
        * load two userdefined characters from program memory
        * into LCD controller CG RAM location 0 and 1
        */
       lcd_command(_BV(LCD_CGRAM));  /* set CG RAM start address 0 */
       for(i=0; i<16; i++)
 1da:	80 e1       	ldi	r24, 0x10	; 16
 1dc:	e8 16       	cp	r14, r24
 1de:	f1 04       	cpc	r15, r1
 1e0:	99 f7       	brne	.-26     	; 0x1c8 <main+0xba>
           lcd_data(pgm_read_byte_near(&copyRightChar[i]));
       }
       
       /* move cursor to position 0 on line 2 */
       /* Note: this switched back to DD RAM adresses */
       lcd_gotoxy(0,1);
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	61 e0       	ldi	r22, 0x01	; 1
 1e6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_gotoxy>
       
       /* display user defined (c), built using two user defined chars */
       lcd_putc(0);
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	0e 94 75 01 	call	0x2ea	; 0x2ea <lcd_putc>
       lcd_putc(1);
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	0e 94 75 01 	call	0x2ea	; 0x2ea <lcd_putc>
       

       /* wait until push button PD2 (INT0) is pressed */
       wait_until_key_pressed();
 1f6:	0e 94 7f 00 	call	0xfe	; 0xfe <wait_until_key_pressed>
              
    }
 1fa:	9f cf       	rjmp	.-194    	; 0x13a <main+0x2c>

000001fc <_delayFourCycles>:
/*************************************************************************
 delay loop for small accurate delays: 16-bit counter, 4 cycles/loop
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
 1fc:	00 97       	sbiw	r24, 0x00	; 0
 1fe:	11 f4       	brne	.+4      	; 0x204 <_delayFourCycles+0x8>
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
 200:	00 c0       	rjmp	.+0      	; 0x202 <_delayFourCycles+0x6>
 202:	08 95       	ret
    else
        __asm__ __volatile__ (
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <_delayFourCycles+0x8>
 208:	08 95       	ret

0000020a <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 20a:	46 9a       	sbi	0x08, 6	; 8
    lcd_e_delay();
 20c:	00 c0       	rjmp	.+0      	; 0x20e <toggle_e+0x4>
    lcd_e_low();
 20e:	46 98       	cbi	0x08, 6	; 8
}
 210:	08 95       	ret

00000212 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
 212:	1f 93       	push	r17
 214:	df 93       	push	r29
 216:	cf 93       	push	r28
 218:	0f 92       	push	r0
 21a:	cd b7       	in	r28, 0x3d	; 61
 21c:	de b7       	in	r29, 0x3e	; 62
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
 21e:	66 23       	and	r22, r22
 220:	11 f0       	breq	.+4      	; 0x226 <lcd_write+0x14>
       lcd_rs_high();
 222:	44 9a       	sbi	0x08, 4	; 8
 224:	01 c0       	rjmp	.+2      	; 0x228 <lcd_write+0x16>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 226:	44 98       	cbi	0x08, 4	; 8
    }
    lcd_rw_low();
 228:	45 98       	cbi	0x08, 5	; 8

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 22a:	97 b1       	in	r25, 0x07	; 7
 22c:	9f 60       	ori	r25, 0x0F	; 15
 22e:	97 b9       	out	0x07, r25	; 7

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
 230:	18 b1       	in	r17, 0x08	; 8
 232:	10 7f       	andi	r17, 0xF0	; 240
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
 234:	98 2f       	mov	r25, r24
 236:	92 95       	swap	r25
 238:	9f 70       	andi	r25, 0x0F	; 15
 23a:	91 2b       	or	r25, r17
 23c:	98 b9       	out	0x08, r25	; 8
        lcd_e_toggle();
 23e:	89 83       	std	Y+1, r24	; 0x01
 240:	0e 94 05 01 	call	0x20a	; 0x20a <toggle_e>

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
 244:	89 81       	ldd	r24, Y+1	; 0x01
 246:	8f 70       	andi	r24, 0x0F	; 15
 248:	81 2b       	or	r24, r17
 24a:	88 b9       	out	0x08, r24	; 8
        lcd_e_toggle();
 24c:	0e 94 05 01 	call	0x20a	; 0x20a <toggle_e>

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
 250:	1f 60       	ori	r17, 0x0F	; 15
 252:	18 b9       	out	0x08, r17	; 8
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    }
}
 254:	0f 90       	pop	r0
 256:	cf 91       	pop	r28
 258:	df 91       	pop	r29
 25a:	1f 91       	pop	r17
 25c:	08 95       	ret

0000025e <lcd_read.clone.0>:
    
    
    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 25e:	44 98       	cbi	0x08, 4	; 8
    lcd_rw_high();                           /* RW=1  read mode      */
 260:	45 9a       	sbi	0x08, 5	; 8
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
 262:	87 b1       	in	r24, 0x07	; 7
 264:	80 7f       	andi	r24, 0xF0	; 240
 266:	87 b9       	out	0x07, r24	; 7
        
        lcd_e_high();
 268:	46 9a       	sbi	0x08, 6	; 8
        lcd_e_delay();        
 26a:	00 c0       	rjmp	.+0      	; 0x26c <lcd_read.clone.0+0xe>
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 26c:	86 b1       	in	r24, 0x06	; 6
        lcd_e_low();
 26e:	46 98       	cbi	0x08, 6	; 8
        
        lcd_e_delay();                       /* Enable 500ns low       */
 270:	00 c0       	rjmp	.+0      	; 0x272 <lcd_read.clone.0+0x14>
        
        lcd_e_high();
 272:	46 9a       	sbi	0x08, 6	; 8
        lcd_e_delay();
 274:	00 c0       	rjmp	.+0      	; 0x276 <lcd_read.clone.0+0x18>
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
 276:	96 b1       	in	r25, 0x06	; 6
 278:	9f 70       	andi	r25, 0x0F	; 15
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
        
        lcd_e_high();
        lcd_e_delay();        
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 27a:	82 95       	swap	r24
 27c:	80 7f       	andi	r24, 0xF0	; 240
        lcd_e_delay();                       /* Enable 500ns low       */
        
        lcd_e_high();
        lcd_e_delay();
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
        lcd_e_low();
 27e:	46 98       	cbi	0x08, 6	; 8
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
        lcd_e_low();
    }
    return data;
}
 280:	89 2b       	or	r24, r25
 282:	08 95       	ret

00000284 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 284:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_read.clone.0>
 288:	87 fd       	sbrc	r24, 7
 28a:	fc cf       	rjmp	.-8      	; 0x284 <lcd_waitbusy>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);
 28c:	82 e0       	ldi	r24, 0x02	; 2
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 fe 00 	call	0x1fc	; 0x1fc <_delayFourCycles>

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 294:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_read.clone.0>
    
}/* lcd_waitbusy */
 298:	08 95       	ret

0000029a <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 29a:	1f 93       	push	r17
 29c:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 29e:	0e 94 42 01 	call	0x284	; 0x284 <lcd_waitbusy>
    lcd_write(cmd,0);
 2a2:	81 2f       	mov	r24, r17
 2a4:	60 e0       	ldi	r22, 0x00	; 0
 2a6:	0e 94 09 01 	call	0x212	; 0x212 <lcd_write>
}
 2aa:	1f 91       	pop	r17
 2ac:	08 95       	ret

000002ae <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 2ae:	1f 93       	push	r17
 2b0:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 2b2:	0e 94 42 01 	call	0x284	; 0x284 <lcd_waitbusy>
    lcd_write(data,1);
 2b6:	81 2f       	mov	r24, r17
 2b8:	61 e0       	ldi	r22, 0x01	; 1
 2ba:	0e 94 09 01 	call	0x212	; 0x212 <lcd_write>
}
 2be:	1f 91       	pop	r17
 2c0:	08 95       	ret

000002c2 <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 2c2:	66 23       	and	r22, r22
 2c4:	11 f4       	brne	.+4      	; 0x2ca <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 2c6:	80 58       	subi	r24, 0x80	; 128
 2c8:	01 c0       	rjmp	.+2      	; 0x2cc <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 2ca:	80 54       	subi	r24, 0x40	; 64
 2cc:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_command>
 2d0:	08 95       	ret

000002d2 <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 2d2:	0e 94 42 01 	call	0x284	; 0x284 <lcd_waitbusy>
}
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	08 95       	ret

000002da <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_command>
}
 2e0:	08 95       	ret

000002e2 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 2e2:	82 e0       	ldi	r24, 0x02	; 2
 2e4:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_command>
}
 2e8:	08 95       	ret

000002ea <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 2ea:	1f 93       	push	r17
 2ec:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 2ee:	0e 94 42 01 	call	0x284	; 0x284 <lcd_waitbusy>
    if (c=='\n')
 2f2:	1a 30       	cpi	r17, 0x0A	; 10
 2f4:	49 f4       	brne	.+18     	; 0x308 <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 2f6:	80 34       	cpi	r24, 0x40	; 64
 2f8:	10 f4       	brcc	.+4      	; 0x2fe <lcd_putc+0x14>
        addressCounter = LCD_START_LINE2;
 2fa:	80 e4       	ldi	r24, 0x40	; 64
 2fc:	01 c0       	rjmp	.+2      	; 0x300 <lcd_putc+0x16>
    else
        addressCounter = LCD_START_LINE1;
 2fe:	80 e0       	ldi	r24, 0x00	; 0
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 300:	80 58       	subi	r24, 0x80	; 128
 302:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_command>
 306:	04 c0       	rjmp	.+8      	; 0x310 <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 308:	81 2f       	mov	r24, r17
 30a:	61 e0       	ldi	r22, 0x01	; 1
 30c:	0e 94 09 01 	call	0x212	; 0x212 <lcd_write>
    }

}/* lcd_putc */
 310:	1f 91       	pop	r17
 312:	08 95       	ret

00000314 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 314:	cf 93       	push	r28
 316:	df 93       	push	r29
 318:	ec 01       	movw	r28, r24
    register char c;

    while ( (c = *s++) ) {
 31a:	02 c0       	rjmp	.+4      	; 0x320 <lcd_puts+0xc>
        lcd_putc(c);
 31c:	0e 94 75 01 	call	0x2ea	; 0x2ea <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 320:	89 91       	ld	r24, Y+
 322:	88 23       	and	r24, r24
 324:	d9 f7       	brne	.-10     	; 0x31c <lcd_puts+0x8>
        lcd_putc(c);
    }

}/* lcd_puts */
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	08 95       	ret

0000032c <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	ec 01       	movw	r28, r24
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 332:	02 c0       	rjmp	.+4      	; 0x338 <lcd_puts_p+0xc>
        lcd_putc(c);
 334:	0e 94 75 01 	call	0x2ea	; 0x2ea <lcd_putc>
 338:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 33a:	21 96       	adiw	r28, 0x01	; 1
 33c:	84 91       	lpm	r24, Z+
 33e:	88 23       	and	r24, r24
 340:	c9 f7       	brne	.-14     	; 0x334 <lcd_puts_p+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	08 95       	ret

00000348 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 348:	1f 93       	push	r17
 34a:	18 2f       	mov	r17, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 34c:	87 b1       	in	r24, 0x07	; 7
 34e:	8f 67       	ori	r24, 0x7F	; 127
 350:	87 b9       	out	0x07, r24	; 7
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
 352:	80 e8       	ldi	r24, 0x80	; 128
 354:	9e e3       	ldi	r25, 0x3E	; 62
 356:	0e 94 fe 00 	call	0x1fc	; 0x1fc <_delayFourCycles>
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 35a:	41 9a       	sbi	0x08, 1	; 8
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 35c:	40 9a       	sbi	0x08, 0	; 8
    lcd_e_toggle();
 35e:	0e 94 05 01 	call	0x20a	; 0x20a <toggle_e>
    delay(4992);         /* delay, busy flag can't be checked here */
 362:	80 e8       	ldi	r24, 0x80	; 128
 364:	93 e1       	ldi	r25, 0x13	; 19
 366:	0e 94 fe 00 	call	0x1fc	; 0x1fc <_delayFourCycles>
   
    /* repeat last command */ 
    lcd_e_toggle();      
 36a:	0e 94 05 01 	call	0x20a	; 0x20a <toggle_e>
    delay(64);           /* delay, busy flag can't be checked here */
 36e:	80 e4       	ldi	r24, 0x40	; 64
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	0e 94 fe 00 	call	0x1fc	; 0x1fc <_delayFourCycles>
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 376:	0e 94 05 01 	call	0x20a	; 0x20a <toggle_e>
    delay(64);           /* delay, busy flag can't be checked here */
 37a:	80 e4       	ldi	r24, 0x40	; 64
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <_delayFourCycles>

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 382:	40 98       	cbi	0x08, 0	; 8
    lcd_e_toggle();
 384:	0e 94 05 01 	call	0x20a	; 0x20a <toggle_e>
    delay(64);           /* some displays need this additional delay */
 388:	80 e4       	ldi	r24, 0x40	; 64
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <_delayFourCycles>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 390:	88 e2       	ldi	r24, 0x28	; 40
 392:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 396:	88 e0       	ldi	r24, 0x08	; 8
 398:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 39c:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 3a0:	86 e0       	ldi	r24, 0x06	; 6
 3a2:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 3a6:	81 2f       	mov	r24, r17
 3a8:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_command>

}/* lcd_init */
 3ac:	1f 91       	pop	r17
 3ae:	08 95       	ret

000003b0 <itoa>:
 3b0:	fb 01       	movw	r30, r22
 3b2:	9f 01       	movw	r18, r30
 3b4:	e8 94       	clt
 3b6:	42 30       	cpi	r20, 0x02	; 2
 3b8:	c4 f0       	brlt	.+48     	; 0x3ea <itoa+0x3a>
 3ba:	45 32       	cpi	r20, 0x25	; 37
 3bc:	b4 f4       	brge	.+44     	; 0x3ea <itoa+0x3a>
 3be:	4a 30       	cpi	r20, 0x0A	; 10
 3c0:	29 f4       	brne	.+10     	; 0x3cc <itoa+0x1c>
 3c2:	97 fb       	bst	r25, 7
 3c4:	1e f4       	brtc	.+6      	; 0x3cc <itoa+0x1c>
 3c6:	90 95       	com	r25
 3c8:	81 95       	neg	r24
 3ca:	9f 4f       	sbci	r25, 0xFF	; 255
 3cc:	64 2f       	mov	r22, r20
 3ce:	77 27       	eor	r23, r23
 3d0:	0e 94 09 02 	call	0x412	; 0x412 <__udivmodhi4>
 3d4:	80 5d       	subi	r24, 0xD0	; 208
 3d6:	8a 33       	cpi	r24, 0x3A	; 58
 3d8:	0c f0       	brlt	.+2      	; 0x3dc <itoa+0x2c>
 3da:	89 5d       	subi	r24, 0xD9	; 217
 3dc:	81 93       	st	Z+, r24
 3de:	cb 01       	movw	r24, r22
 3e0:	00 97       	sbiw	r24, 0x00	; 0
 3e2:	a1 f7       	brne	.-24     	; 0x3cc <itoa+0x1c>
 3e4:	16 f4       	brtc	.+4      	; 0x3ea <itoa+0x3a>
 3e6:	5d e2       	ldi	r21, 0x2D	; 45
 3e8:	51 93       	st	Z+, r21
 3ea:	10 82       	st	Z, r1
 3ec:	c9 01       	movw	r24, r18
 3ee:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <strrev>

000003f2 <strrev>:
 3f2:	dc 01       	movw	r26, r24
 3f4:	fc 01       	movw	r30, r24
 3f6:	67 2f       	mov	r22, r23
 3f8:	71 91       	ld	r23, Z+
 3fa:	77 23       	and	r23, r23
 3fc:	e1 f7       	brne	.-8      	; 0x3f6 <strrev+0x4>
 3fe:	32 97       	sbiw	r30, 0x02	; 2
 400:	04 c0       	rjmp	.+8      	; 0x40a <strrev+0x18>
 402:	7c 91       	ld	r23, X
 404:	6d 93       	st	X+, r22
 406:	70 83       	st	Z, r23
 408:	62 91       	ld	r22, -Z
 40a:	ae 17       	cp	r26, r30
 40c:	bf 07       	cpc	r27, r31
 40e:	c8 f3       	brcs	.-14     	; 0x402 <strrev+0x10>
 410:	08 95       	ret

00000412 <__udivmodhi4>:
 412:	aa 1b       	sub	r26, r26
 414:	bb 1b       	sub	r27, r27
 416:	51 e1       	ldi	r21, 0x11	; 17
 418:	07 c0       	rjmp	.+14     	; 0x428 <__udivmodhi4_ep>

0000041a <__udivmodhi4_loop>:
 41a:	aa 1f       	adc	r26, r26
 41c:	bb 1f       	adc	r27, r27
 41e:	a6 17       	cp	r26, r22
 420:	b7 07       	cpc	r27, r23
 422:	10 f0       	brcs	.+4      	; 0x428 <__udivmodhi4_ep>
 424:	a6 1b       	sub	r26, r22
 426:	b7 0b       	sbc	r27, r23

00000428 <__udivmodhi4_ep>:
 428:	88 1f       	adc	r24, r24
 42a:	99 1f       	adc	r25, r25
 42c:	5a 95       	dec	r21
 42e:	a9 f7       	brne	.-22     	; 0x41a <__udivmodhi4_loop>
 430:	80 95       	com	r24
 432:	90 95       	com	r25
 434:	bc 01       	movw	r22, r24
 436:	cd 01       	movw	r24, r26
 438:	08 95       	ret

0000043a <_exit>:
 43a:	f8 94       	cli

0000043c <__stop_program>:
 43c:	ff cf       	rjmp	.-2      	; 0x43c <__stop_program>
