A filesystem is an abstraction to store, retrieve and update a set of files. The term also identifies the data structures specified by some of those abstractions, which are designed to organize multiple files as a single stream of bytes, and the network protocols specified by some other of those abstractions, which are designed to allow files on a remote machine to be accessed. By extension, the term also identifies software or firmware components that implement the abstraction ( that actually access the data source on behalf of other software or firmware that uses those components).

The filesystem manages access to the data and the metadata of the files, and manages the available space of the device(s) which contain it. Ensuring reliability is a major responsibility of a filesystem. A filesystem organizes data in an efficient manner, and may be tuned to the characteristics of the backing device.

Some filesystems are used on data storage devices, to maintain the locations of the files on the device (which is seen as a stream of bytes). Others provide access to files residing on a server, by acting as clients for a network protocol (NFS, SMB). Others provide access to data that is not stored on a persistent device, and may be computed on request (procfs). This is distinguished from a directory service and registry. 

A filesystem allocates space in a granular manner, usually multiple physical units on the device. The filesystem is responsible for organizing files and directories, and keeping track of which areas of the media belong to which file and which are not being used. For example, in Apple DOS of the early 1980, 256-byte sectors on 140 kilobyte floppy disk used a sector map.

This results in unused space when a file is not an exact multiple of the allocation unit, sometimes referred to as slack space. For a 512-byte allocation, the average unused space is 255 bytes. For a 64 KB clusters, the average unused space is 32 KB. The size of the allocation unit is chosen when the file system is created. Choosing the allocation size based on the average size of the files expected to be in the filesystem can minimize the amount of unusable space. Frequently the default allocation may provide reasonable usage. Choosing an allocation size that is too small results in excessive overhead if the filesystem will contain mostly very large files.

Filesystem fragmentation occurs when unused space or single files are not contiguous. As a file system is used, files are created, modified and deleted. When a file is created the filesystem allocates space for the data. Some filesystems permit or require specifying an initial space allocation and subsequent incremental allocations as the file grows. As files are deleted the space they were allocated eventually is considered available for use by other files. This creates alternating used and unused areas of various sizes. This is free space fragmentation. When a file is created and there is not an area of contiguous space available for its initial allocation the space must be assigned in fragments. When a file is modified such that it becomes larger it may exceed the space initially allocated to it, another allocation must be assigned elsewhere and the file becomes fragmented.

Other bookkeeping information is typically associated with each file within a filesystem. The length of the data contained in a file may be stored as the number of blocks allocated for the file or as a byte count.
Some filesystems allow for different data collections to be associated with one file name. 

In some cases, a filesystem may not make use of a storage device but can be used to organize and represent access to any data, whether it is stored or dynamically generated.

Some of the most important features of filesystem utilities involve supervisory activities which may involve bypassing ownership or direct access to the underlying device. These include high-performance backup and recovery, data replication and reorganization of various data structures and allocation tables within the filesystem.

There are several mechanisms used by filesystems to control access to data. Usually the intent is to prevent reading or modifying files by a user or group of users. Another reason is to ensure data is modified in a controlled way so access may be restricted to a specific program.
