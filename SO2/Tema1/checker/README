= KPROBE BASED TRACER TEST SUITE ==

Test suite for  kprobe based tracer (Ixia Challenge 2013)

== FILES ==

README
	* this file

Makefile.checker
	* Makefile for automating the build process

run_tests.bash
	* script to run all tests defined in _test/tracer_test.c

_test/Makefile
	* test suite internal Makefile (creates necessary object files)

_test/tracer_test.c
	* test suite for Kprobe Based Tracer

_test/tracer_test.h
	* test suite header file

_test/tracer.h
	* kprobe tracer header file (macros and structures)

_test/test.h
	* useful macros for testing

_test/debug.h
	* debugging macros

_test/util.h
	* useful macros for generic use (error processing)

_helper/tracer_helper.c
	* helper kernel module for simulating kprobed ops

== BUILDING ==

Use the Makefile to properly build the tracer_test executable:

	make -f Makefile.checker

== RUNNING ==

In order to run the test suite you can either use the run_tests.bash
script or run the tracer_test executable.

The run_test.bash script runs all tests and computes assigment grade:

	./run_tests.bash

In order to run a specific test use the pass the test number (1 .. 33) to the
stp_test executable.

	./tracer_test 12

== TESTS ==

Tests are basically unit tests. A single function in the test_fun_array (see
tracer_test.c) is called each time the tracer_test executable is invoked,
testing a single functionality (and assuming previous tests have been run and
passed).

The EXIT_IF_FAIL macro (see test.h) is unnecessary since after each test, the
program completes.

Each test function follows the unit test pattern: initialization, action,
evaluation. The test macro (see test.h) is invoked at the end of each test
for evaluating and grading the test.

== DEBUGGING ==

The debug.h header file consists of several macros useful for debugging
(dprintf, dlog). There are multiple uses of these macros throughout the above
files.

In order to turn debug messages on, you must define the DEBUG macro, either in
a header file, or, I suggest, in the Makefile. The LOG_LEVEL macro limits the
log message types that are to be printed, by default LOG_WARNING (see enum in
debug.h). You may redefine it in a header file or in the Makefile.

Rapid enabling of debug messages is achieved by commenting out the CPPFLAGS
line in the Makefile. It turns on debugging and enables all log messages
(LOG_DEBUG).

== OTHER ==

srand48() and drand48() are used for generating random numbers.
